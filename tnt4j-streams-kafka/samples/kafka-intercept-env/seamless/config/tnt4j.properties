# Default tracking configuration for all sources (source: *), used only if no other stanza matches.
{
	source: *
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.GEOADDR: New York
	source.factory.DATACENTER: HQDC
	source.factory.RootFQN: RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?#GEOADDR=?
	
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

# Configuration for TrackingLogger
{
	source: com.jkoolcloud.tnt4j.TrackingLogger
	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	event.formatter: com.jkoolcloud.tnt4j.format.SimpleFormatter
	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

# Stanza used for TNT4J-Streams sources
{
	source: com.jkoolcloud.tnt4j.streams
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.APPL: Streams-DEV
	source.factory.DATACENTER: SLABS
	source.factory.RootFQN: APPL=?#RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?
	source.factory.RootSSN: tnt4j-streams

	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	tracker.default.snapshot.category: TNT4J-Streams-event-snapshot

	# event sink configuration: destination and data format
	# NOTE: IT IS NOT RECOMMENDED TO USE BufferedEventSinkFactory (asynchronous sinks) WITH STREAMS. Streams and sinks are meant to
	# act in sync, especially when sink (e.g., 'JKCloud', 'Mqtt', 'Kafka') consumer uses network communication.
	###event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	###event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl

	#### Sample file event sink factory configuration ####
	#event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
	#event.sink.factory.FileName: ./logs/tnt4j-streams-activities.log
	#### Sample file sink factory configuration end ####

	#### jKoolCloud event sink factory configuration ####
	event.sink.factory: com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory
#	#### When events should go nowhere
#	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.NullEventSinkFactory
	##### streamed activity entities logging over simple file sink #####
#	event.sink.factory.LogSink: file:./logs/tnt4j-streams-activities.log
	##### streamed activity entities logging over SLF4J sink #####
	##### NOTE: logger name should match log4j2.xml defined logger name mapped to use 'activities_log' appender #####
	event.sink.factory.LogSink: slf4j:com.jkoolcloud.tnt4j.streams.activities_log

	#event.sink.factory.Url: http://data.jkoolcloud.com:6580
	#event.sink.factory.Url: https://data.jkoolcloud.com:6585
	event.sink.factory.Url: https://data.jkoolcloud.com
	event.sink.factory.Token: 388ecd57-6332-4d19-aa0a-255a83a088b3
	###event.sink.factory.Token: Lf1J8Tv7lvLjb8g8yrigpMsEJxkb3trI

	#event.sink.factory.Url: http://172.16.6.42:6580
	##event.sink.factory.Token: sockets
	##event.sink.factory.Token: norvegu-token
	#event.sink.factory.Token: aaa
	#### jKoolCloud event sink factory configuration end ####

	#### Kafka event sink factory configuration ####
	#event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.kafka.KafkaEventSinkFactory
	#event.sink.factory.propFile: config/tnt4j-kafka.properties
	#event.sink.factory.topic: tnt4j_kafka
	#### Kafka event sink factory configuration end ####

	#### MQTT event sink factory configuration ####
	#event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.mqtt.MqttEventSinkFactory
	#event.sink.factory.mqtt-server-url: tcp://localhost:1883
	#event.sink.factory.mqtt-topic: tnt4jStreams
	#event.sink.factory.mqtt-user: mqtt-user
	#event.sink.factory.mqtt-pwd: mqtt-pwd
	#### MQTT event sink factory configuration end ####

	event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
	#event.formatter.Newline: true
	; Configures special numeric values handling. Can be one of: SUPPRESS, ENQUOTE, MAINTAIN. Default value: SUPPRESS
	#event.formatter.SpecNumbersHandling: SUPPRESS

	# Configure default sink filter based on level and time (elapsed/wait)
	##event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	##event.sink.factory.Filter.Level: TRACE
	# Uncomment lines below to filter out events based on elapsed time and wait time
	# Timed event/activities greater or equal to given values will be logged
	##event.sink.factory.Filter.ElapsedUsec: 100
	##event.sink.factory.Filter.WaitUsec: 100

	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}

# Stanza used for TNT4J-Streams-Kafka interceptors reporters sources
{
	source: com.jkoolcloud.tnt4j.streams.custom.kafka.interceptors.reporters.metrics
	source.factory: com.jkoolcloud.tnt4j.source.SourceFactoryImpl
	source.factory.APPL: Streams-Kafka-Interceptors-DEV
	source.factory.DATACENTER: SLABS
	source.factory.RootFQN: APPL=?#RUNTIME=?#SERVER=?#NETADDR=?#DATACENTER=?
	source.factory.RootSSN: tnt4j-streams-kafka

	tracker.factory: com.jkoolcloud.tnt4j.tracker.DefaultTrackerFactory
	dump.sink.factory: com.jkoolcloud.tnt4j.dump.DefaultDumpSinkFactory
	tracker.default.snapshot.category: TNT4J-Streams-kafka-event-snapshot

	# event sink configuration: destination and data format
	# NOTE: IT IS NOT RECOMMENDED TO USE BufferedEventSinkFactory (asynchronous sinks) WITH STREAMS. Streams and sinks are meant to
	# act in sync, especially when sink (e.g., 'JKCloud', 'Mqtt', 'Kafka') consumer uses network communication.
	###event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	###event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl

	#### Kafka event sink factory configuration ####
	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.kafka.KafkaEventSinkFactory
	event.sink.factory.topic: tnt4j-kafka-interceptor-metrics
	## You can configure sink used Kafka Producer by providing external configuration file path
	# event.sink.factory.propFile: ../config/tnt4j-kafka.properties
	## Or right there within sink factory configuration
	event.sink.factory.bootstrap.servers: localhost:9092
	event.sink.factory.acks: all
	event.sink.factory.retries: 0
	event.sink.factory.linger.ms: 1
	event.sink.factory.buffer.memory: 33554432
	event.sink.factory.key.serializer: org.apache.kafka.common.serialization.StringSerializer
	event.sink.factory.value.serializer: org.apache.kafka.common.serialization.StringSerializer
	event.sink.factory.client.id: kafka-x-ray-metrics-reporter
	#### Kafka event sink factory configuration end ####

	event.formatter: com.jkoolcloud.tnt4j.format.LevelingJSONFormatter
	#event.formatter.Newline: true
	; Configures special numeric values handling. Can be one of: SUPPRESS, ENQUOTE, MAINTAIN. Default value: SUPPRESS
	event.formatter.SpecNumbersHandling: SUPPRESS
	event.formatter.Level: 2
	event.formatter.KeyReplacements: ","->";" "."->"_" "\\"->"_"

	tracking.selector: com.jkoolcloud.tnt4j.selector.DefaultTrackingSelector
	tracking.selector.Repository: com.jkoolcloud.tnt4j.repository.FileTokenRepository
}
