<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2014-2023 JKOOL, LLC.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<tnt-data-source
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/Nastel/tnt4j-streams/master/config/tnt-data-source.xsd">

    <resource-ref id="MetricsParsers" type="Parser" uri="parsers.xml"/>

    <stream name="OTLPStream" class="com.jkoolcloud.tnt4j.streams.inputs.HttpStream">
        <property name="HaltIfNoParser" value="false"/>
        <property name="SplitRelatives" value="false"/>
        <property name="SendStreamStates" value="false"/>
        <property name="BuildSourceFQNFromStreamedData" value="false"/>
        <!--<property name="SourceFQN" value="DATACENTER=${DataCenter}#GENERIC=Streams"/>-->
        <property name="RetryStateCheck" value="true"/>
        <property name="RetryInterval" value="300"/>

        <!-- Stream run HTTP server configuration -->
        <property name="Host" value="127.0.0.1"/>
        <property name="Port" value="8787"/>
        <property name="UseSSL" value="false"/>
        <property name="Keystore" value="file://clientkeystore"/>
        <property name="KeyPass" value="pass123"/>
        <property name="KeystorePass" value="pass123"/>

        <tnt4j-properties>
            <!-- Set your CloudWatch data center name -->
            <property name="source.factory.DATACENTER" value="OTLP"/>
            <property name="source.factory.RootFQN" value="DATACENTER=?"/>

            <!-- Sequence of sinks to broadcast stream produced activities. You may leave just one of them to sent data to single endpoint -->
            <property name="event.sink.factory.BroadcastSequence" value="ap"/>

            <!-- File sink -->
            <property name="event.sink.factory.EventSinkFactory.file" value="com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory"/>
            <property name="event.sink.factory.EventSinkFactory.file.FileName" value="./logs/tnt4j-streams-otlp_samples.log"/>

            <property name="event.sink.factory.EventSinkFactory.file.Formatter" value="com.jkoolcloud.tnt4j.format.JSONFormatter"/>

            <!-- JKool/XRay sink -->
            <property name="event.sink.factory.EventSinkFactory.xray" value="com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory"/>
            <property name="event.sink.factory.EventSinkFactory.xray.LogSink"
                      value="slf4j:com.jkoolcloud.tnt4j.streams.activities_prod_log"/>
            <property name="event.sink.factory.EventSinkFactory.xray.Url" value="https://data.jkoolcloud.com"/>
            <property name="event.sink.factory.EventSinkFactory.xray.Token" value="388ecd57-6332-4d19-aa0a-255a83a088b3"/>

            <property name="event.sink.factory.EventSinkFactory.xray.Formatter" value="com.jkoolcloud.tnt4j.format.JSONFormatter"/>

            <!-- Activities routing by activity field "RoutePath" value "xray" -->
            <property name="event.sink.factory.EventSinkFactory.xray.Filter"
                      value="com.jkoolcloud.tnt4j.streams.sink.filters.EventMatchExpressionFilter"/>
            <property name="event.sink.factory.EventSinkFactory.xray.Filter.MatchExp"><![CDATA[
                groovy:StringUtils.equals(${RoutePath}, "xray")
            ]]></property>

            <property name="event.sink.factory.EventSinkFactory.ap" value="com.jkoolcloud.tnt4j.sink.impl.SocketEventSinkFactory"/>
            <!--<property name="event.sink.factory.EventSinkFactory.ap.LogSink" value="file:./logs/tnt4j-streams_samples_socket.log"/>-->
            <property name="event.sink.factory.EventSinkFactory.ap.LogSink" value="null"/>
            <property name="event.sink.factory.EventSinkFactory.ap.Host" value="localhost"/>
            <property name="event.sink.factory.EventSinkFactory.ap.Port" value="6060"/>

            <!-- Activities routing by activity field "RoutePath" value "ap" or null -->
            <property name="event.sink.factory.EventSinkFactory.ap.Filter"
                      value="com.jkoolcloud.tnt4j.streams.sink.filters.EventMatchExpressionFilter"/>
            <property name="event.sink.factory.EventSinkFactory.ap.Filter.MatchExp"><![CDATA[
                groovy: StringUtils.equalsAny(${RoutePath}, "ap", null)
            ]]></property>

            <property name="event.sink.factory.EventSinkFactory.ap.Formatter"
                      value="com.jkoolcloud.tnt4j.streams.custom.format.autopilot.FactPathValueFormatter"/>
            <property name="event.sink.factory.EventSinkFactory.ap.Formatter.AddSelfSnapshot" value="false"/>
            <property name="event.sink.factory.EventSinkFactory.ap.Formatter.KeyReplacements">
                " "->"_" "\\\""->"" "\""->"'" "/"->"%" "="->"\\" ","->"!" "\\\\"->"\\"
            </property>
            <property name="event.sink.factory.EventSinkFactory.ap.Formatter.ValueReplacements">
                "\r"->"\\r" "\n"->"\\n" ";"->"|" ","->"|" "["->"{(" "]"->")}" "\""->"'"
            </property>
            <!-- Path of activity name properties to build AutoPilot facts tree layout -->
            <property name="event.sink.factory.EventSinkFactory.ap.Formatter.PathLevelAttributes">
                domain;service;process;owner;scope;metric;
            </property>

            <property name="event.sink.factory.RateLimit" value="false"/>
            <property name="event.sink.factory.RateMaxMPS" value="45"/>
            <property name="event.sink.factory.RateMaxBPS" value="50000"/>
            <!--  < 0 BLOCK_UNTIL_GRANTED, 0 NO_BLOCK, > 0 BLOCK_UNTIL_TIMEOUT in milliseconds -->
            <property name="event.sink.factory.RateTimeout" value="-1"/>
        </tnt4j-properties>

        <parser-ref name="OTLPParser"/>
    </stream>
</tnt-data-source>
