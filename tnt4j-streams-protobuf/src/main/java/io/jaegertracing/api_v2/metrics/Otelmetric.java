// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jaeger/api_v2/metrics/otelmetric.proto

package io.jaegertracing.api_v2.metrics;

public final class Otelmetric {
  private Otelmetric() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * AggregationTemporality defines how a metric aggregator reports aggregated
   * values. It describes how those values relate to the time interval over
   * which they are aggregated.
   * </pre>
   *
   * Protobuf enum {@code jaeger.api_v2.metrics.AggregationTemporality}
   */
  public enum AggregationTemporality
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * UNSPECIFIED is the default AggregationTemporality, it MUST not be used.
     * </pre>
     *
     * <code>AGGREGATION_TEMPORALITY_UNSPECIFIED = 0;</code>
     */
    AGGREGATION_TEMPORALITY_UNSPECIFIED(0),
    /**
     * <pre>
     * DELTA is an AggregationTemporality for a metric aggregator which reports
     * changes since last report time. Successive metrics contain aggregation of
     * values from continuous and non-overlapping intervals.
     * The values for a DELTA metric are based only on the time interval
     * associated with one measurement cycle. There is no dependency on
     * previous measurements like is the case for CUMULATIVE metrics.
     * For example, consider a system measuring the number of requests that
     * it receives and reports the sum of these requests every second as a
     * DELTA metric:
     *   1. The system starts receiving at time=t_0.
     *   2. A request is received, the system measures 1 request.
     *   3. A request is received, the system measures 1 request.
     *   4. A request is received, the system measures 1 request.
     *   5. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0 to
     *      t_0+1 with a value of 3.
     *   6. A request is received, the system measures 1 request.
     *   7. A request is received, the system measures 1 request.
     *   8. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0+1 to
     *      t_0+2 with a value of 2.
     * </pre>
     *
     * <code>AGGREGATION_TEMPORALITY_DELTA = 1;</code>
     */
    AGGREGATION_TEMPORALITY_DELTA(1),
    /**
     * <pre>
     * CUMULATIVE is an AggregationTemporality for a metric aggregator which
     * reports changes since a fixed start time. This means that current values
     * of a CUMULATIVE metric depend on all previous measurements since the
     * start time. Because of this, the sender is required to retain this state
     * in some form. If this state is lost or invalidated, the CUMULATIVE metric
     * values MUST be reset and a new fixed start time following the last
     * reported measurement time sent MUST be used.
     * For example, consider a system measuring the number of requests that
     * it receives and reports the sum of these requests every second as a
     * CUMULATIVE metric:
     *   1. The system starts receiving at time=t_0.
     *   2. A request is received, the system measures 1 request.
     *   3. A request is received, the system measures 1 request.
     *   4. A request is received, the system measures 1 request.
     *   5. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0 to
     *      t_0+1 with a value of 3.
     *   6. A request is received, the system measures 1 request.
     *   7. A request is received, the system measures 1 request.
     *   8. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0 to
     *      t_0+2 with a value of 5.
     *   9. The system experiences a fault and loses state.
     *   10. The system recovers and resumes receiving at time=t_1.
     *   11. A request is received, the system measures 1 request.
     *   12. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_1 to
     *      t_0+1 with a value of 1.
     * Note: Even though, when reporting changes since last report time, using
     * CUMULATIVE is valid, it is not recommended. This may cause problems for
     * systems that do not use start_time to determine when the aggregation
     * value was reset (e.g. Prometheus).
     * </pre>
     *
     * <code>AGGREGATION_TEMPORALITY_CUMULATIVE = 2;</code>
     */
    AGGREGATION_TEMPORALITY_CUMULATIVE(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * UNSPECIFIED is the default AggregationTemporality, it MUST not be used.
     * </pre>
     *
     * <code>AGGREGATION_TEMPORALITY_UNSPECIFIED = 0;</code>
     */
    public static final int AGGREGATION_TEMPORALITY_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * DELTA is an AggregationTemporality for a metric aggregator which reports
     * changes since last report time. Successive metrics contain aggregation of
     * values from continuous and non-overlapping intervals.
     * The values for a DELTA metric are based only on the time interval
     * associated with one measurement cycle. There is no dependency on
     * previous measurements like is the case for CUMULATIVE metrics.
     * For example, consider a system measuring the number of requests that
     * it receives and reports the sum of these requests every second as a
     * DELTA metric:
     *   1. The system starts receiving at time=t_0.
     *   2. A request is received, the system measures 1 request.
     *   3. A request is received, the system measures 1 request.
     *   4. A request is received, the system measures 1 request.
     *   5. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0 to
     *      t_0+1 with a value of 3.
     *   6. A request is received, the system measures 1 request.
     *   7. A request is received, the system measures 1 request.
     *   8. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0+1 to
     *      t_0+2 with a value of 2.
     * </pre>
     *
     * <code>AGGREGATION_TEMPORALITY_DELTA = 1;</code>
     */
    public static final int AGGREGATION_TEMPORALITY_DELTA_VALUE = 1;
    /**
     * <pre>
     * CUMULATIVE is an AggregationTemporality for a metric aggregator which
     * reports changes since a fixed start time. This means that current values
     * of a CUMULATIVE metric depend on all previous measurements since the
     * start time. Because of this, the sender is required to retain this state
     * in some form. If this state is lost or invalidated, the CUMULATIVE metric
     * values MUST be reset and a new fixed start time following the last
     * reported measurement time sent MUST be used.
     * For example, consider a system measuring the number of requests that
     * it receives and reports the sum of these requests every second as a
     * CUMULATIVE metric:
     *   1. The system starts receiving at time=t_0.
     *   2. A request is received, the system measures 1 request.
     *   3. A request is received, the system measures 1 request.
     *   4. A request is received, the system measures 1 request.
     *   5. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0 to
     *      t_0+1 with a value of 3.
     *   6. A request is received, the system measures 1 request.
     *   7. A request is received, the system measures 1 request.
     *   8. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_0 to
     *      t_0+2 with a value of 5.
     *   9. The system experiences a fault and loses state.
     *   10. The system recovers and resumes receiving at time=t_1.
     *   11. A request is received, the system measures 1 request.
     *   12. The 1 second collection cycle ends. A metric is exported for the
     *      number of requests received over the interval of time t_1 to
     *      t_0+1 with a value of 1.
     * Note: Even though, when reporting changes since last report time, using
     * CUMULATIVE is valid, it is not recommended. This may cause problems for
     * systems that do not use start_time to determine when the aggregation
     * value was reset (e.g. Prometheus).
     * </pre>
     *
     * <code>AGGREGATION_TEMPORALITY_CUMULATIVE = 2;</code>
     */
    public static final int AGGREGATION_TEMPORALITY_CUMULATIVE_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AggregationTemporality valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AggregationTemporality forNumber(int value) {
      switch (value) {
        case 0: return AGGREGATION_TEMPORALITY_UNSPECIFIED;
        case 1: return AGGREGATION_TEMPORALITY_DELTA;
        case 2: return AGGREGATION_TEMPORALITY_CUMULATIVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AggregationTemporality>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AggregationTemporality> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AggregationTemporality>() {
            public AggregationTemporality findValueByNumber(int number) {
              return AggregationTemporality.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.getDescriptor().getEnumTypes().get(0);
    }

    private static final AggregationTemporality[] VALUES = values();

    public static AggregationTemporality valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AggregationTemporality(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jaeger.api_v2.metrics.AggregationTemporality)
  }

  public interface StringKeyValueOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.StringKeyValue)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string key = 1;</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <code>string value = 2;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();
  }
  /**
   * <pre>
   * StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
   * of KeyValue that only supports string values.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.StringKeyValue}
   */
  public static final class StringKeyValue extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.StringKeyValue)
      StringKeyValueOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StringKeyValue.newBuilder() to construct.
    private StringKeyValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StringKeyValue() {
      key_ = "";
      value_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StringKeyValue();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StringKeyValue(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              key_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              value_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_StringKeyValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_StringKeyValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.class, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private volatile java.lang.Object key_;
    /**
     * <code>string key = 1;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <code>string key = 1;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private volatile java.lang.Object value_;
    /**
     * <code>string value = 2;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        value_ = s;
        return s;
      }
    }
    /**
     * <code>string value = 2;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      java.lang.Object ref = value_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        value_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, value_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(key_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, key_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(value_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, value_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue other = (io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
     * of KeyValue that only supports string values.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.StringKeyValue}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.StringKeyValue)
        io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_StringKeyValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_StringKeyValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.class, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        key_ = "";

        value_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_StringKeyValue_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue result = new io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue(this);
        result.key_ = key_;
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance()) return this;
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getValue().isEmpty()) {
          value_ = other.value_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <code>string key = 1;</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string key = 1;</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object value_ = "";
      /**
       * <code>string value = 2;</code>
       * @return The value.
       */
      public java.lang.String getValue() {
        java.lang.Object ref = value_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          value_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      public com.google.protobuf.ByteString
          getValueBytes() {
        java.lang.Object ref = value_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          value_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string value = 2;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string value = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }
      /**
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        value_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.StringKeyValue)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.StringKeyValue)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StringKeyValue>
        PARSER = new com.google.protobuf.AbstractParser<StringKeyValue>() {
      @java.lang.Override
      public StringKeyValue parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StringKeyValue(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StringKeyValue> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StringKeyValue> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MetricOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.Metric)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * name of the metric, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * name of the metric, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The description.
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The bytes for description.
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <pre>
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return The unit.
     */
    java.lang.String getUnit();
    /**
     * <pre>
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return The bytes for unit.
     */
    com.google.protobuf.ByteString
        getUnitBytes();

    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_gauge is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=126
     * @return Whether the intGauge field is set.
     */
    @java.lang.Deprecated boolean hasIntGauge();
    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_gauge is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=126
     * @return The intGauge.
     */
    @java.lang.Deprecated io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge getIntGauge();
    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder getIntGaugeOrBuilder();

    /**
     * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
     * @return Whether the gauge field is set.
     */
    boolean hasGauge();
    /**
     * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
     * @return The gauge.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.Gauge getGauge();
    /**
     * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder getGaugeOrBuilder();

    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_sum is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=129
     * @return Whether the intSum field is set.
     */
    @java.lang.Deprecated boolean hasIntSum();
    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_sum is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=129
     * @return The intSum.
     */
    @java.lang.Deprecated io.jaegertracing.api_v2.metrics.Otelmetric.IntSum getIntSum();
    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder getIntSumOrBuilder();

    /**
     * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
     * @return Whether the sum field is set.
     */
    boolean hasSum();
    /**
     * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
     * @return The sum.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.Sum getSum();
    /**
     * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder getSumOrBuilder();

    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_histogram is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=139
     * @return Whether the intHistogram field is set.
     */
    @java.lang.Deprecated boolean hasIntHistogram();
    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_histogram is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=139
     * @return The intHistogram.
     */
    @java.lang.Deprecated io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram getIntHistogram();
    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder getIntHistogramOrBuilder();

    /**
     * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
     * @return Whether the histogram field is set.
     */
    boolean hasHistogram();
    /**
     * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
     * @return The histogram.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.Histogram getHistogram();
    /**
     * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder getHistogramOrBuilder();

    /**
     * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
     * @return Whether the summary field is set.
     */
    boolean hasSummary();
    /**
     * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
     * @return The summary.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.Summary getSummary();
    /**
     * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder getSummaryOrBuilder();

    public io.jaegertracing.api_v2.metrics.Otelmetric.Metric.DataCase getDataCase();
  }
  /**
   * <pre>
   * Defines a Metric which has one or more timeseries.
   * The data model and relation between entities is shown in the
   * diagram below. Here, "DataPoint" is the term used to refer to any
   * one of the specific data point value types, and "points" is the term used
   * to refer to any one of the lists of points contained in the Metric.
   * - Metric is composed of a metadata and data.
   * - Metadata part contains a name, description, unit.
   * - Data is one of the possible types (Gauge, Sum, Histogram, etc.).
   * - DataPoint contains timestamps, labels, and one of the possible value type
   *   fields.
   *     Metric
   *  +------------+
   *  |name        |
   *  |description |
   *  |unit        |     +------------------------------------+
   *  |data        |---&gt; |Gauge, Sum, Histogram, Summary, ... |
   *  +------------+     +------------------------------------+
   *    Data [One of Gauge, Sum, Histogram, Summary, ...]
   *  +-----------+
   *  |...        |  // Metadata about the Data.
   *  |points     |--+
   *  +-----------+  |
   *                 |      +---------------------------+
   *                 |      |DataPoint 1                |
   *                 v      |+------+------+   +------+ |
   *              +-----+   ||label |label |...|label | |
   *              |  1  |--&gt;||value1|value2|...|valueN| |
   *              +-----+   |+------+------+   +------+ |
   *              |  .  |   |+-----+                    |
   *              |  .  |   ||value|                    |
   *              |  .  |   |+-----+                    |
   *              |  .  |   +---------------------------+
   *              |  .  |                   .
   *              |  .  |                   .
   *              |  .  |                   .
   *              |  .  |   +---------------------------+
   *              |  .  |   |DataPoint M                |
   *              +-----+   |+------+------+   +------+ |
   *              |  M  |--&gt;||label |label |...|label | |
   *              +-----+   ||value1|value2|...|valueN| |
   *                        |+------+------+   +------+ |
   *                        |+-----+                    |
   *                        ||value|                    |
   *                        |+-----+                    |
   *                        +---------------------------+
   * All DataPoint types have three common fields:
   * - Labels zero or more key-value pairs associated with the data point.
   * - StartTimeUnixNano MUST be set to the start of the interval when the data's
   *   type includes an AggregationTemporality. This field is not set otherwise.
   * - TimeUnixNano MUST be set to:
   *   - the moment when an aggregation is reported (independent of the
   *     aggregation temporality).
   *   - the instantaneous time of the event.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.Metric}
   */
  public static final class Metric extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.Metric)
      MetricOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Metric.newBuilder() to construct.
    private Metric(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Metric() {
      name_ = "";
      description_ = "";
      unit_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Metric();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Metric(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              description_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              unit_ = s;
              break;
            }
            case 34: {
              io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder subBuilder = null;
              if (dataCase_ == 4) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 4;
              break;
            }
            case 42: {
              io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder subBuilder = null;
              if (dataCase_ == 5) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 5;
              break;
            }
            case 50: {
              io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder subBuilder = null;
              if (dataCase_ == 6) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 6;
              break;
            }
            case 58: {
              io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder subBuilder = null;
              if (dataCase_ == 7) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.Sum.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 7;
              break;
            }
            case 66: {
              io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder subBuilder = null;
              if (dataCase_ == 8) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 8;
              break;
            }
            case 74: {
              io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder subBuilder = null;
              if (dataCase_ == 9) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 9;
              break;
            }
            case 90: {
              io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder subBuilder = null;
              if (dataCase_ == 11) {
                subBuilder = ((io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_).toBuilder();
              }
              data_ =
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.Summary.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_);
                data_ = subBuilder.buildPartial();
              }
              dataCase_ = 11;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Metric_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Metric_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.Metric.class, io.jaegertracing.api_v2.metrics.Otelmetric.Metric.Builder.class);
    }

    private int dataCase_ = 0;
    private java.lang.Object data_;
    public enum DataCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      @java.lang.Deprecated INT_GAUGE(4),
      GAUGE(5),
      @java.lang.Deprecated INT_SUM(6),
      SUM(7),
      @java.lang.Deprecated INT_HISTOGRAM(8),
      HISTOGRAM(9),
      SUMMARY(11),
      DATA_NOT_SET(0);
      private final int value;
      private DataCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DataCase valueOf(int value) {
        return forNumber(value);
      }

      public static DataCase forNumber(int value) {
        switch (value) {
          case 4: return INT_GAUGE;
          case 5: return GAUGE;
          case 6: return INT_SUM;
          case 7: return SUM;
          case 8: return INT_HISTOGRAM;
          case 9: return HISTOGRAM;
          case 11: return SUMMARY;
          case 0: return DATA_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public DataCase
    getDataCase() {
      return DataCase.forNumber(
          dataCase_);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * name of the metric, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * name of the metric, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 2;
    private volatile java.lang.Object description_;
    /**
     * <pre>
     * description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UNIT_FIELD_NUMBER = 3;
    private volatile java.lang.Object unit_;
    /**
     * <pre>
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return The unit.
     */
    @java.lang.Override
    public java.lang.String getUnit() {
      java.lang.Object ref = unit_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unit_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return The bytes for unit.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnitBytes() {
      java.lang.Object ref = unit_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unit_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INT_GAUGE_FIELD_NUMBER = 4;
    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_gauge is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=126
     * @return Whether the intGauge field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasIntGauge() {
      return dataCase_ == 4;
    }
    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_gauge is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=126
     * @return The intGauge.
     */
    @java.lang.Override
    @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge getIntGauge() {
      if (dataCase_ == 4) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
    }
    /**
     * <pre>
     * IntGauge and IntSum are deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_gauge` and `int_sum` fields.
     * 2. New senders, which are aware of this change MUST send only `gauge`
     * and `sum` fields.
     * 3. New receivers, which are aware of this change MUST convert these into
     * `gauge` and `sum` by using the provided as_int field in the oneof values.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder getIntGaugeOrBuilder() {
      if (dataCase_ == 4) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
    }

    public static final int GAUGE_FIELD_NUMBER = 5;
    /**
     * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
     * @return Whether the gauge field is set.
     */
    @java.lang.Override
    public boolean hasGauge() {
      return dataCase_ == 5;
    }
    /**
     * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
     * @return The gauge.
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge getGauge() {
      if (dataCase_ == 5) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
    }
    /**
     * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder getGaugeOrBuilder() {
      if (dataCase_ == 5) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
    }

    public static final int INT_SUM_FIELD_NUMBER = 6;
    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_sum is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=129
     * @return Whether the intSum field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasIntSum() {
      return dataCase_ == 6;
    }
    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_sum is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=129
     * @return The intSum.
     */
    @java.lang.Override
    @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum getIntSum() {
      if (dataCase_ == 6) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
    }
    /**
     * <pre>
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder getIntSumOrBuilder() {
      if (dataCase_ == 6) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
    }

    public static final int SUM_FIELD_NUMBER = 7;
    /**
     * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
     * @return Whether the sum field is set.
     */
    @java.lang.Override
    public boolean hasSum() {
      return dataCase_ == 7;
    }
    /**
     * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
     * @return The sum.
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Sum getSum() {
      if (dataCase_ == 7) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
    }
    /**
     * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder getSumOrBuilder() {
      if (dataCase_ == 7) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
    }

    public static final int INT_HISTOGRAM_FIELD_NUMBER = 8;
    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_histogram is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=139
     * @return Whether the intHistogram field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasIntHistogram() {
      return dataCase_ == 8;
    }
    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
     * @deprecated jaeger.api_v2.metrics.Metric.int_histogram is deprecated.
     *     See jaeger/api_v2/metrics/otelmetric.proto;l=139
     * @return The intHistogram.
     */
    @java.lang.Override
    @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram getIntHistogram() {
      if (dataCase_ == 8) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
    }
    /**
     * <pre>
     * IntHistogram is deprecated and will be removed soon.
     * 1. Old senders and receivers that are not aware of this change will
     * continue using the `int_histogram` field.
     * 2. New senders, which are aware of this change MUST send only `histogram`.
     * 3. New receivers, which are aware of this change MUST convert this into
     * `histogram` by simply converting all int64 values into float.
     * This field will be removed in ~3 months, on July 1, 2021.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder getIntHistogramOrBuilder() {
      if (dataCase_ == 8) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
    }

    public static final int HISTOGRAM_FIELD_NUMBER = 9;
    /**
     * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
     * @return Whether the histogram field is set.
     */
    @java.lang.Override
    public boolean hasHistogram() {
      return dataCase_ == 9;
    }
    /**
     * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
     * @return The histogram.
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram getHistogram() {
      if (dataCase_ == 9) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
    }
    /**
     * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder getHistogramOrBuilder() {
      if (dataCase_ == 9) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
    }

    public static final int SUMMARY_FIELD_NUMBER = 11;
    /**
     * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
     * @return Whether the summary field is set.
     */
    @java.lang.Override
    public boolean hasSummary() {
      return dataCase_ == 11;
    }
    /**
     * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
     * @return The summary.
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Summary getSummary() {
      if (dataCase_ == 11) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
    }
    /**
     * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder getSummaryOrBuilder() {
      if (dataCase_ == 11) {
         return (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_;
      }
      return io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, description_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unit_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, unit_);
      }
      if (dataCase_ == 4) {
        output.writeMessage(4, (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_);
      }
      if (dataCase_ == 5) {
        output.writeMessage(5, (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_);
      }
      if (dataCase_ == 6) {
        output.writeMessage(6, (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_);
      }
      if (dataCase_ == 7) {
        output.writeMessage(7, (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_);
      }
      if (dataCase_ == 8) {
        output.writeMessage(8, (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_);
      }
      if (dataCase_ == 9) {
        output.writeMessage(9, (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_);
      }
      if (dataCase_ == 11) {
        output.writeMessage(11, (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(description_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, description_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unit_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, unit_);
      }
      if (dataCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_);
      }
      if (dataCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_);
      }
      if (dataCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_);
      }
      if (dataCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_);
      }
      if (dataCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_);
      }
      if (dataCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_);
      }
      if (dataCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Metric)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.Metric other = (io.jaegertracing.api_v2.metrics.Otelmetric.Metric) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (!getDescription()
          .equals(other.getDescription())) return false;
      if (!getUnit()
          .equals(other.getUnit())) return false;
      if (!getDataCase().equals(other.getDataCase())) return false;
      switch (dataCase_) {
        case 4:
          if (!getIntGauge()
              .equals(other.getIntGauge())) return false;
          break;
        case 5:
          if (!getGauge()
              .equals(other.getGauge())) return false;
          break;
        case 6:
          if (!getIntSum()
              .equals(other.getIntSum())) return false;
          break;
        case 7:
          if (!getSum()
              .equals(other.getSum())) return false;
          break;
        case 8:
          if (!getIntHistogram()
              .equals(other.getIntHistogram())) return false;
          break;
        case 9:
          if (!getHistogram()
              .equals(other.getHistogram())) return false;
          break;
        case 11:
          if (!getSummary()
              .equals(other.getSummary())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + getDescription().hashCode();
      hash = (37 * hash) + UNIT_FIELD_NUMBER;
      hash = (53 * hash) + getUnit().hashCode();
      switch (dataCase_) {
        case 4:
          hash = (37 * hash) + INT_GAUGE_FIELD_NUMBER;
          hash = (53 * hash) + getIntGauge().hashCode();
          break;
        case 5:
          hash = (37 * hash) + GAUGE_FIELD_NUMBER;
          hash = (53 * hash) + getGauge().hashCode();
          break;
        case 6:
          hash = (37 * hash) + INT_SUM_FIELD_NUMBER;
          hash = (53 * hash) + getIntSum().hashCode();
          break;
        case 7:
          hash = (37 * hash) + SUM_FIELD_NUMBER;
          hash = (53 * hash) + getSum().hashCode();
          break;
        case 8:
          hash = (37 * hash) + INT_HISTOGRAM_FIELD_NUMBER;
          hash = (53 * hash) + getIntHistogram().hashCode();
          break;
        case 9:
          hash = (37 * hash) + HISTOGRAM_FIELD_NUMBER;
          hash = (53 * hash) + getHistogram().hashCode();
          break;
        case 11:
          hash = (37 * hash) + SUMMARY_FIELD_NUMBER;
          hash = (53 * hash) + getSummary().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.Metric prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a Metric which has one or more timeseries.
     * The data model and relation between entities is shown in the
     * diagram below. Here, "DataPoint" is the term used to refer to any
     * one of the specific data point value types, and "points" is the term used
     * to refer to any one of the lists of points contained in the Metric.
     * - Metric is composed of a metadata and data.
     * - Metadata part contains a name, description, unit.
     * - Data is one of the possible types (Gauge, Sum, Histogram, etc.).
     * - DataPoint contains timestamps, labels, and one of the possible value type
     *   fields.
     *     Metric
     *  +------------+
     *  |name        |
     *  |description |
     *  |unit        |     +------------------------------------+
     *  |data        |---&gt; |Gauge, Sum, Histogram, Summary, ... |
     *  +------------+     +------------------------------------+
     *    Data [One of Gauge, Sum, Histogram, Summary, ...]
     *  +-----------+
     *  |...        |  // Metadata about the Data.
     *  |points     |--+
     *  +-----------+  |
     *                 |      +---------------------------+
     *                 |      |DataPoint 1                |
     *                 v      |+------+------+   +------+ |
     *              +-----+   ||label |label |...|label | |
     *              |  1  |--&gt;||value1|value2|...|valueN| |
     *              +-----+   |+------+------+   +------+ |
     *              |  .  |   |+-----+                    |
     *              |  .  |   ||value|                    |
     *              |  .  |   |+-----+                    |
     *              |  .  |   +---------------------------+
     *              |  .  |                   .
     *              |  .  |                   .
     *              |  .  |                   .
     *              |  .  |   +---------------------------+
     *              |  .  |   |DataPoint M                |
     *              +-----+   |+------+------+   +------+ |
     *              |  M  |--&gt;||label |label |...|label | |
     *              +-----+   ||value1|value2|...|valueN| |
     *                        |+------+------+   +------+ |
     *                        |+-----+                    |
     *                        ||value|                    |
     *                        |+-----+                    |
     *                        +---------------------------+
     * All DataPoint types have three common fields:
     * - Labels zero or more key-value pairs associated with the data point.
     * - StartTimeUnixNano MUST be set to the start of the interval when the data's
     *   type includes an AggregationTemporality. This field is not set otherwise.
     * - TimeUnixNano MUST be set to:
     *   - the moment when an aggregation is reported (independent of the
     *     aggregation temporality).
     *   - the instantaneous time of the event.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.Metric}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.Metric)
        io.jaegertracing.api_v2.metrics.Otelmetric.MetricOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Metric_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Metric_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.Metric.class, io.jaegertracing.api_v2.metrics.Otelmetric.Metric.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.Metric.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        description_ = "";

        unit_ = "";

        dataCase_ = 0;
        data_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Metric_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Metric getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.Metric.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Metric build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Metric result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Metric buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Metric result = new io.jaegertracing.api_v2.metrics.Otelmetric.Metric(this);
        result.name_ = name_;
        result.description_ = description_;
        result.unit_ = unit_;
        if (dataCase_ == 4) {
          if (intGaugeBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = intGaugeBuilder_.build();
          }
        }
        if (dataCase_ == 5) {
          if (gaugeBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = gaugeBuilder_.build();
          }
        }
        if (dataCase_ == 6) {
          if (intSumBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = intSumBuilder_.build();
          }
        }
        if (dataCase_ == 7) {
          if (sumBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = sumBuilder_.build();
          }
        }
        if (dataCase_ == 8) {
          if (intHistogramBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = intHistogramBuilder_.build();
          }
        }
        if (dataCase_ == 9) {
          if (histogramBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = histogramBuilder_.build();
          }
        }
        if (dataCase_ == 11) {
          if (summaryBuilder_ == null) {
            result.data_ = data_;
          } else {
            result.data_ = summaryBuilder_.build();
          }
        }
        result.dataCase_ = dataCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Metric) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Metric)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.Metric other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.Metric.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getDescription().isEmpty()) {
          description_ = other.description_;
          onChanged();
        }
        if (!other.getUnit().isEmpty()) {
          unit_ = other.unit_;
          onChanged();
        }
        switch (other.getDataCase()) {
          case INT_GAUGE: {
            mergeIntGauge(other.getIntGauge());
            break;
          }
          case GAUGE: {
            mergeGauge(other.getGauge());
            break;
          }
          case INT_SUM: {
            mergeIntSum(other.getIntSum());
            break;
          }
          case SUM: {
            mergeSum(other.getSum());
            break;
          }
          case INT_HISTOGRAM: {
            mergeIntHistogram(other.getIntHistogram());
            break;
          }
          case HISTOGRAM: {
            mergeHistogram(other.getHistogram());
            break;
          }
          case SUMMARY: {
            mergeSummary(other.getSummary());
            break;
          }
          case DATA_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.Metric parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.Metric) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int dataCase_ = 0;
      private java.lang.Object data_;
      public DataCase
          getDataCase() {
        return DataCase.forNumber(
            dataCase_);
      }

      public Builder clearData() {
        dataCase_ = 0;
        data_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object name_ = "";
      /**
       * <pre>
       * name of the metric, including its DNS name prefix. It must be unique.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * name of the metric, including its DNS name prefix. It must be unique.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * name of the metric, including its DNS name prefix. It must be unique.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * name of the metric, including its DNS name prefix. It must be unique.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * name of the metric, including its DNS name prefix. It must be unique.
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <pre>
       * description of the metric, which can be used in documentation.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The description.
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * description of the metric, which can be used in documentation.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * description of the metric, which can be used in documentation.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @param value The description to set.
       * @return This builder for chaining.
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        description_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description of the metric, which can be used in documentation.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDescription() {
        
        description_ = getDefaultInstance().getDescription();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description of the metric, which can be used in documentation.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @param value The bytes for description to set.
       * @return This builder for chaining.
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        description_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object unit_ = "";
      /**
       * <pre>
       * unit in which the metric value is reported. Follows the format
       * described by http://unitsofmeasure.org/ucum.html.
       * </pre>
       *
       * <code>string unit = 3;</code>
       * @return The unit.
       */
      public java.lang.String getUnit() {
        java.lang.Object ref = unit_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          unit_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * unit in which the metric value is reported. Follows the format
       * described by http://unitsofmeasure.org/ucum.html.
       * </pre>
       *
       * <code>string unit = 3;</code>
       * @return The bytes for unit.
       */
      public com.google.protobuf.ByteString
          getUnitBytes() {
        java.lang.Object ref = unit_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          unit_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * unit in which the metric value is reported. Follows the format
       * described by http://unitsofmeasure.org/ucum.html.
       * </pre>
       *
       * <code>string unit = 3;</code>
       * @param value The unit to set.
       * @return This builder for chaining.
       */
      public Builder setUnit(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        unit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unit in which the metric value is reported. Follows the format
       * described by http://unitsofmeasure.org/ucum.html.
       * </pre>
       *
       * <code>string unit = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearUnit() {
        
        unit_ = getDefaultInstance().getUnit();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unit in which the metric value is reported. Follows the format
       * described by http://unitsofmeasure.org/ucum.html.
       * </pre>
       *
       * <code>string unit = 3;</code>
       * @param value The bytes for unit to set.
       * @return This builder for chaining.
       */
      public Builder setUnitBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        unit_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge, io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder> intGaugeBuilder_;
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       * @deprecated jaeger.api_v2.metrics.Metric.int_gauge is deprecated.
       *     See jaeger/api_v2/metrics/otelmetric.proto;l=126
       * @return Whether the intGauge field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasIntGauge() {
        return dataCase_ == 4;
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       * @deprecated jaeger.api_v2.metrics.Metric.int_gauge is deprecated.
       *     See jaeger/api_v2/metrics/otelmetric.proto;l=126
       * @return The intGauge.
       */
      @java.lang.Override
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge getIntGauge() {
        if (intGaugeBuilder_ == null) {
          if (dataCase_ == 4) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
        } else {
          if (dataCase_ == 4) {
            return intGaugeBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIntGauge(io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge value) {
        if (intGaugeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          intGaugeBuilder_.setMessage(value);
        }
        dataCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIntGauge(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder builderForValue) {
        if (intGaugeBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          intGaugeBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeIntGauge(io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge value) {
        if (intGaugeBuilder_ == null) {
          if (dataCase_ == 4 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 4) {
            intGaugeBuilder_.mergeFrom(value);
          } else {
            intGaugeBuilder_.setMessage(value);
          }
        }
        dataCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearIntGauge() {
        if (intGaugeBuilder_ == null) {
          if (dataCase_ == 4) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 4) {
            dataCase_ = 0;
            data_ = null;
          }
          intGaugeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder getIntGaugeBuilder() {
        return getIntGaugeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder getIntGaugeOrBuilder() {
        if ((dataCase_ == 4) && (intGaugeBuilder_ != null)) {
          return intGaugeBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 4) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * IntGauge and IntSum are deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_gauge` and `int_sum` fields.
       * 2. New senders, which are aware of this change MUST send only `gauge`
       * and `sum` fields.
       * 3. New receivers, which are aware of this change MUST convert these into
       * `gauge` and `sum` by using the provided as_int field in the oneof values.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntGauge int_gauge = 4 [deprecated = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge, io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder> 
          getIntGaugeFieldBuilder() {
        if (intGaugeBuilder_ == null) {
          if (!(dataCase_ == 4)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
          }
          intGaugeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge, io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 4;
        onChanged();;
        return intGaugeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Gauge, io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder> gaugeBuilder_;
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       * @return Whether the gauge field is set.
       */
      @java.lang.Override
      public boolean hasGauge() {
        return dataCase_ == 5;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       * @return The gauge.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge getGauge() {
        if (gaugeBuilder_ == null) {
          if (dataCase_ == 5) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
        } else {
          if (dataCase_ == 5) {
            return gaugeBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      public Builder setGauge(io.jaegertracing.api_v2.metrics.Otelmetric.Gauge value) {
        if (gaugeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          gaugeBuilder_.setMessage(value);
        }
        dataCase_ = 5;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      public Builder setGauge(
          io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder builderForValue) {
        if (gaugeBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          gaugeBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 5;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      public Builder mergeGauge(io.jaegertracing.api_v2.metrics.Otelmetric.Gauge value) {
        if (gaugeBuilder_ == null) {
          if (dataCase_ == 5 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 5) {
            gaugeBuilder_.mergeFrom(value);
          } else {
            gaugeBuilder_.setMessage(value);
          }
        }
        dataCase_ = 5;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      public Builder clearGauge() {
        if (gaugeBuilder_ == null) {
          if (dataCase_ == 5) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 5) {
            dataCase_ = 0;
            data_ = null;
          }
          gaugeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder getGaugeBuilder() {
        return getGaugeFieldBuilder().getBuilder();
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder getGaugeOrBuilder() {
        if ((dataCase_ == 5) && (gaugeBuilder_ != null)) {
          return gaugeBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 5) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Gauge gauge = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Gauge, io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder> 
          getGaugeFieldBuilder() {
        if (gaugeBuilder_ == null) {
          if (!(dataCase_ == 5)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
          }
          gaugeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.Gauge, io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 5;
        onChanged();;
        return gaugeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntSum, io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder> intSumBuilder_;
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       * @deprecated jaeger.api_v2.metrics.Metric.int_sum is deprecated.
       *     See jaeger/api_v2/metrics/otelmetric.proto;l=129
       * @return Whether the intSum field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasIntSum() {
        return dataCase_ == 6;
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       * @deprecated jaeger.api_v2.metrics.Metric.int_sum is deprecated.
       *     See jaeger/api_v2/metrics/otelmetric.proto;l=129
       * @return The intSum.
       */
      @java.lang.Override
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum getIntSum() {
        if (intSumBuilder_ == null) {
          if (dataCase_ == 6) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
        } else {
          if (dataCase_ == 6) {
            return intSumBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIntSum(io.jaegertracing.api_v2.metrics.Otelmetric.IntSum value) {
        if (intSumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          intSumBuilder_.setMessage(value);
        }
        dataCase_ = 6;
        return this;
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIntSum(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder builderForValue) {
        if (intSumBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          intSumBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 6;
        return this;
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeIntSum(io.jaegertracing.api_v2.metrics.Otelmetric.IntSum value) {
        if (intSumBuilder_ == null) {
          if (dataCase_ == 6 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 6) {
            intSumBuilder_.mergeFrom(value);
          } else {
            intSumBuilder_.setMessage(value);
          }
        }
        dataCase_ = 6;
        return this;
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearIntSum() {
        if (intSumBuilder_ == null) {
          if (dataCase_ == 6) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 6) {
            dataCase_ = 0;
            data_ = null;
          }
          intSumBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder getIntSumBuilder() {
        return getIntSumFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder getIntSumOrBuilder() {
        if ((dataCase_ == 6) && (intSumBuilder_ != null)) {
          return intSumBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 6) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntSum int_sum = 6 [deprecated = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntSum, io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder> 
          getIntSumFieldBuilder() {
        if (intSumBuilder_ == null) {
          if (!(dataCase_ == 6)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
          }
          intSumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntSum, io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 6;
        onChanged();;
        return intSumBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Sum, io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder> sumBuilder_;
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       * @return Whether the sum field is set.
       */
      @java.lang.Override
      public boolean hasSum() {
        return dataCase_ == 7;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       * @return The sum.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Sum getSum() {
        if (sumBuilder_ == null) {
          if (dataCase_ == 7) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
        } else {
          if (dataCase_ == 7) {
            return sumBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      public Builder setSum(io.jaegertracing.api_v2.metrics.Otelmetric.Sum value) {
        if (sumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          sumBuilder_.setMessage(value);
        }
        dataCase_ = 7;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      public Builder setSum(
          io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder builderForValue) {
        if (sumBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          sumBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 7;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      public Builder mergeSum(io.jaegertracing.api_v2.metrics.Otelmetric.Sum value) {
        if (sumBuilder_ == null) {
          if (dataCase_ == 7 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Sum.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 7) {
            sumBuilder_.mergeFrom(value);
          } else {
            sumBuilder_.setMessage(value);
          }
        }
        dataCase_ = 7;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      public Builder clearSum() {
        if (sumBuilder_ == null) {
          if (dataCase_ == 7) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 7) {
            dataCase_ = 0;
            data_ = null;
          }
          sumBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder getSumBuilder() {
        return getSumFieldBuilder().getBuilder();
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder getSumOrBuilder() {
        if ((dataCase_ == 7) && (sumBuilder_ != null)) {
          return sumBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 7) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Sum sum = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Sum, io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder> 
          getSumFieldBuilder() {
        if (sumBuilder_ == null) {
          if (!(dataCase_ == 7)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
          }
          sumBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.Sum, io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 7;
        onChanged();;
        return sumBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder> intHistogramBuilder_;
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       * @deprecated jaeger.api_v2.metrics.Metric.int_histogram is deprecated.
       *     See jaeger/api_v2/metrics/otelmetric.proto;l=139
       * @return Whether the intHistogram field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasIntHistogram() {
        return dataCase_ == 8;
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       * @deprecated jaeger.api_v2.metrics.Metric.int_histogram is deprecated.
       *     See jaeger/api_v2/metrics/otelmetric.proto;l=139
       * @return The intHistogram.
       */
      @java.lang.Override
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram getIntHistogram() {
        if (intHistogramBuilder_ == null) {
          if (dataCase_ == 8) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
        } else {
          if (dataCase_ == 8) {
            return intHistogramBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIntHistogram(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram value) {
        if (intHistogramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          intHistogramBuilder_.setMessage(value);
        }
        dataCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIntHistogram(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder builderForValue) {
        if (intHistogramBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          intHistogramBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeIntHistogram(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram value) {
        if (intHistogramBuilder_ == null) {
          if (dataCase_ == 8 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 8) {
            intHistogramBuilder_.mergeFrom(value);
          } else {
            intHistogramBuilder_.setMessage(value);
          }
        }
        dataCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearIntHistogram() {
        if (intHistogramBuilder_ == null) {
          if (dataCase_ == 8) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 8) {
            dataCase_ = 0;
            data_ = null;
          }
          intHistogramBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder getIntHistogramBuilder() {
        return getIntHistogramFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder getIntHistogramOrBuilder() {
        if ((dataCase_ == 8) && (intHistogramBuilder_ != null)) {
          return intHistogramBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 8) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * IntHistogram is deprecated and will be removed soon.
       * 1. Old senders and receivers that are not aware of this change will
       * continue using the `int_histogram` field.
       * 2. New senders, which are aware of this change MUST send only `histogram`.
       * 3. New receivers, which are aware of this change MUST convert this into
       * `histogram` by simply converting all int64 values into float.
       * This field will be removed in ~3 months, on July 1, 2021.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.IntHistogram int_histogram = 8 [deprecated = true];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder> 
          getIntHistogramFieldBuilder() {
        if (intHistogramBuilder_ == null) {
          if (!(dataCase_ == 8)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
          }
          intHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 8;
        onChanged();;
        return intHistogramBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Histogram, io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder> histogramBuilder_;
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       * @return Whether the histogram field is set.
       */
      @java.lang.Override
      public boolean hasHistogram() {
        return dataCase_ == 9;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       * @return The histogram.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram getHistogram() {
        if (histogramBuilder_ == null) {
          if (dataCase_ == 9) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
        } else {
          if (dataCase_ == 9) {
            return histogramBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      public Builder setHistogram(io.jaegertracing.api_v2.metrics.Otelmetric.Histogram value) {
        if (histogramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          histogramBuilder_.setMessage(value);
        }
        dataCase_ = 9;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      public Builder setHistogram(
          io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder builderForValue) {
        if (histogramBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          histogramBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 9;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      public Builder mergeHistogram(io.jaegertracing.api_v2.metrics.Otelmetric.Histogram value) {
        if (histogramBuilder_ == null) {
          if (dataCase_ == 9 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 9) {
            histogramBuilder_.mergeFrom(value);
          } else {
            histogramBuilder_.setMessage(value);
          }
        }
        dataCase_ = 9;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      public Builder clearHistogram() {
        if (histogramBuilder_ == null) {
          if (dataCase_ == 9) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 9) {
            dataCase_ = 0;
            data_ = null;
          }
          histogramBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder getHistogramBuilder() {
        return getHistogramFieldBuilder().getBuilder();
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder getHistogramOrBuilder() {
        if ((dataCase_ == 9) && (histogramBuilder_ != null)) {
          return histogramBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 9) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Histogram histogram = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Histogram, io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder> 
          getHistogramFieldBuilder() {
        if (histogramBuilder_ == null) {
          if (!(dataCase_ == 9)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
          }
          histogramBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.Histogram, io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 9;
        onChanged();;
        return histogramBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Summary, io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder> summaryBuilder_;
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       * @return Whether the summary field is set.
       */
      @java.lang.Override
      public boolean hasSummary() {
        return dataCase_ == 11;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       * @return The summary.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Summary getSummary() {
        if (summaryBuilder_ == null) {
          if (dataCase_ == 11) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
        } else {
          if (dataCase_ == 11) {
            return summaryBuilder_.getMessage();
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      public Builder setSummary(io.jaegertracing.api_v2.metrics.Otelmetric.Summary value) {
        if (summaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          summaryBuilder_.setMessage(value);
        }
        dataCase_ = 11;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      public Builder setSummary(
          io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder builderForValue) {
        if (summaryBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          summaryBuilder_.setMessage(builderForValue.build());
        }
        dataCase_ = 11;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      public Builder mergeSummary(io.jaegertracing.api_v2.metrics.Otelmetric.Summary value) {
        if (summaryBuilder_ == null) {
          if (dataCase_ == 11 &&
              data_ != io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance()) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Summary.newBuilder((io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_)
                .mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          if (dataCase_ == 11) {
            summaryBuilder_.mergeFrom(value);
          } else {
            summaryBuilder_.setMessage(value);
          }
        }
        dataCase_ = 11;
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      public Builder clearSummary() {
        if (summaryBuilder_ == null) {
          if (dataCase_ == 11) {
            dataCase_ = 0;
            data_ = null;
            onChanged();
          }
        } else {
          if (dataCase_ == 11) {
            dataCase_ = 0;
            data_ = null;
          }
          summaryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder getSummaryBuilder() {
        return getSummaryFieldBuilder().getBuilder();
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder getSummaryOrBuilder() {
        if ((dataCase_ == 11) && (summaryBuilder_ != null)) {
          return summaryBuilder_.getMessageOrBuilder();
        } else {
          if (dataCase_ == 11) {
            return (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_;
          }
          return io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
        }
      }
      /**
       * <code>.jaeger.api_v2.metrics.Summary summary = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Summary, io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder> 
          getSummaryFieldBuilder() {
        if (summaryBuilder_ == null) {
          if (!(dataCase_ == 11)) {
            data_ = io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
          }
          summaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.Summary, io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder>(
                  (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) data_,
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        dataCase_ = 11;
        onChanged();;
        return summaryBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.Metric)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.Metric)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.Metric DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.Metric();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Metric getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Metric>
        PARSER = new com.google.protobuf.AbstractParser<Metric>() {
      @java.lang.Override
      public Metric parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Metric(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Metric> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Metric> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Metric getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface IntGaugeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.IntGauge)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder getDataPointsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * IntGauge is deprecated.  Use Gauge with an integer value in NumberDataPoint.
   * IntGauge represents the type of a int scalar metric that always exports the
   * "current value" for every data point. It should be used for an "unknown"
   * aggregation.
   * A Gauge does not support different aggregation temporalities. Given the
   * aggregation is unknown, points cannot be combined using the same
   * aggregation, regardless of aggregation temporalities. Therefore,
   * AggregationTemporality is not included. Consequently, this also means
   * "StartTimeUnixNano" is ignored for all data points.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.IntGauge}
   */
  @java.lang.Deprecated public static final class IntGauge extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.IntGauge)
      IntGaugeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntGauge.newBuilder() to construct.
    private IntGauge(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntGauge() {
      dataPoints_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntGauge();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntGauge(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntGauge_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntGauge_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge other = (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IntGauge is deprecated.  Use Gauge with an integer value in NumberDataPoint.
     * IntGauge represents the type of a int scalar metric that always exports the
     * "current value" for every data point. It should be used for an "unknown"
     * aggregation.
     * A Gauge does not support different aggregation temporalities. Given the
     * aggregation is unknown, points cannot be combined using the same
     * aggregation, regardless of aggregation temporalities. Therefore,
     * AggregationTemporality is not included. Consequently, this also means
     * "StartTimeUnixNano" is ignored for all data points.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.IntGauge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.IntGauge)
        io.jaegertracing.api_v2.metrics.Otelmetric.IntGaugeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntGauge_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntGauge_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntGauge_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge result = new io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.IntGauge)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.IntGauge)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntGauge>
        PARSER = new com.google.protobuf.AbstractParser<IntGauge>() {
      @java.lang.Override
      public IntGauge parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntGauge(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntGauge> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntGauge> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntGauge getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GaugeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.Gauge)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder getDataPointsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Gauge represents the type of a double scalar metric that always exports the
   * "current value" for every data point. It should be used for an "unknown"
   * aggregation.
   * A Gauge does not support different aggregation temporalities. Given the
   * aggregation is unknown, points cannot be combined using the same
   * aggregation, regardless of aggregation temporalities. Therefore,
   * AggregationTemporality is not included. Consequently, this also means
   * "StartTimeUnixNano" is ignored for all data points.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.Gauge}
   */
  public static final class Gauge extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.Gauge)
      GaugeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Gauge.newBuilder() to construct.
    private Gauge(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Gauge() {
      dataPoints_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Gauge();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Gauge(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Gauge_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Gauge_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.class, io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Gauge)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.Gauge other = (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.Gauge prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Gauge represents the type of a double scalar metric that always exports the
     * "current value" for every data point. It should be used for an "unknown"
     * aggregation.
     * A Gauge does not support different aggregation temporalities. Given the
     * aggregation is unknown, points cannot be combined using the same
     * aggregation, regardless of aggregation temporalities. Therefore,
     * AggregationTemporality is not included. Consequently, this also means
     * "StartTimeUnixNano" is ignored for all data points.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.Gauge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.Gauge)
        io.jaegertracing.api_v2.metrics.Otelmetric.GaugeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Gauge_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Gauge_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.class, io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Gauge_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Gauge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Gauge result = new io.jaegertracing.api_v2.metrics.Otelmetric.Gauge(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Gauge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.Gauge other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.Gauge.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.Gauge parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.Gauge) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.Gauge)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.Gauge)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.Gauge DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.Gauge();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Gauge getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Gauge>
        PARSER = new com.google.protobuf.AbstractParser<Gauge>() {
      @java.lang.Override
      public Gauge parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Gauge(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Gauge> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Gauge> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Gauge getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface IntSumOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.IntSum)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder getDataPointsOrBuilder(
        int index);

    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    int getAggregationTemporalityValue();
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality();

    /**
     * <pre>
     * If "true" means that the sum is monotonic.
     * </pre>
     *
     * <code>bool is_monotonic = 3;</code>
     * @return The isMonotonic.
     */
    boolean getIsMonotonic();
  }
  /**
   * <pre>
   * IntSum is deprecated.  Use Sum with an integer value in NumberDataPoint.
   * IntSum represents the type of a numeric int scalar metric that is calculated as
   * a sum of all reported measurements over a time interval.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.IntSum}
   */
  @java.lang.Deprecated public static final class IntSum extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.IntSum)
      IntSumOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntSum.newBuilder() to construct.
    private IntSum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntSum() {
      dataPoints_ = java.util.Collections.emptyList();
      aggregationTemporality_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntSum();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntSum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.parser(), extensionRegistry));
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              aggregationTemporality_ = rawValue;
              break;
            }
            case 24: {

              isMonotonic_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntSum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntSum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    public static final int AGGREGATION_TEMPORALITY_FIELD_NUMBER = 2;
    private int aggregationTemporality_;
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    @java.lang.Override public int getAggregationTemporalityValue() {
      return aggregationTemporality_;
    }
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    @java.lang.Override public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
      @SuppressWarnings("deprecation")
      io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
      return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
    }

    public static final int IS_MONOTONIC_FIELD_NUMBER = 3;
    private boolean isMonotonic_;
    /**
     * <pre>
     * If "true" means that the sum is monotonic.
     * </pre>
     *
     * <code>bool is_monotonic = 3;</code>
     * @return The isMonotonic.
     */
    @java.lang.Override
    public boolean getIsMonotonic() {
      return isMonotonic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        output.writeEnum(2, aggregationTemporality_);
      }
      if (isMonotonic_ != false) {
        output.writeBool(3, isMonotonic_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, aggregationTemporality_);
      }
      if (isMonotonic_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isMonotonic_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntSum)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.IntSum other = (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (aggregationTemporality_ != other.aggregationTemporality_) return false;
      if (getIsMonotonic()
          != other.getIsMonotonic()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (37 * hash) + AGGREGATION_TEMPORALITY_FIELD_NUMBER;
      hash = (53 * hash) + aggregationTemporality_;
      hash = (37 * hash) + IS_MONOTONIC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsMonotonic());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.IntSum prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IntSum is deprecated.  Use Sum with an integer value in NumberDataPoint.
     * IntSum represents the type of a numeric int scalar metric that is calculated as
     * a sum of all reported measurements over a time interval.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.IntSum}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.IntSum)
        io.jaegertracing.api_v2.metrics.Otelmetric.IntSumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntSum_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntSum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        aggregationTemporality_ = 0;

        isMonotonic_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntSum_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntSum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntSum result = new io.jaegertracing.api_v2.metrics.Otelmetric.IntSum(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        result.aggregationTemporality_ = aggregationTemporality_;
        result.isMonotonic_ = isMonotonic_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntSum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.IntSum other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.IntSum.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        if (other.aggregationTemporality_ != 0) {
          setAggregationTemporalityValue(other.getAggregationTemporalityValue());
        }
        if (other.getIsMonotonic() != false) {
          setIsMonotonic(other.getIsMonotonic());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntSum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.IntSum) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }

      private int aggregationTemporality_ = 0;
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The enum numeric value on the wire for aggregationTemporality.
       */
      @java.lang.Override public int getAggregationTemporalityValue() {
        return aggregationTemporality_;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The enum numeric value on the wire for aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporalityValue(int value) {
        
        aggregationTemporality_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The aggregationTemporality.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
        @SuppressWarnings("deprecation")
        io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
        return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporality(io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        aggregationTemporality_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAggregationTemporality() {
        
        aggregationTemporality_ = 0;
        onChanged();
        return this;
      }

      private boolean isMonotonic_ ;
      /**
       * <pre>
       * If "true" means that the sum is monotonic.
       * </pre>
       *
       * <code>bool is_monotonic = 3;</code>
       * @return The isMonotonic.
       */
      @java.lang.Override
      public boolean getIsMonotonic() {
        return isMonotonic_;
      }
      /**
       * <pre>
       * If "true" means that the sum is monotonic.
       * </pre>
       *
       * <code>bool is_monotonic = 3;</code>
       * @param value The isMonotonic to set.
       * @return This builder for chaining.
       */
      public Builder setIsMonotonic(boolean value) {
        
        isMonotonic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If "true" means that the sum is monotonic.
       * </pre>
       *
       * <code>bool is_monotonic = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsMonotonic() {
        
        isMonotonic_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.IntSum)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.IntSum)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.IntSum DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.IntSum();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntSum getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntSum>
        PARSER = new com.google.protobuf.AbstractParser<IntSum>() {
      @java.lang.Override
      public IntSum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntSum(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntSum> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntSum> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntSum getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SumOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.Sum)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder getDataPointsOrBuilder(
        int index);

    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    int getAggregationTemporalityValue();
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality();

    /**
     * <pre>
     * If "true" means that the sum is monotonic.
     * </pre>
     *
     * <code>bool is_monotonic = 3;</code>
     * @return The isMonotonic.
     */
    boolean getIsMonotonic();
  }
  /**
   * <pre>
   * Sum represents the type of a numeric double scalar metric that is calculated
   * as a sum of all reported measurements over a time interval.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.Sum}
   */
  public static final class Sum extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.Sum)
      SumOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Sum.newBuilder() to construct.
    private Sum(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Sum() {
      dataPoints_ = java.util.Collections.emptyList();
      aggregationTemporality_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Sum();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Sum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.parser(), extensionRegistry));
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              aggregationTemporality_ = rawValue;
              break;
            }
            case 24: {

              isMonotonic_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Sum_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Sum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.Sum.class, io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    public static final int AGGREGATION_TEMPORALITY_FIELD_NUMBER = 2;
    private int aggregationTemporality_;
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    @java.lang.Override public int getAggregationTemporalityValue() {
      return aggregationTemporality_;
    }
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    @java.lang.Override public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
      @SuppressWarnings("deprecation")
      io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
      return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
    }

    public static final int IS_MONOTONIC_FIELD_NUMBER = 3;
    private boolean isMonotonic_;
    /**
     * <pre>
     * If "true" means that the sum is monotonic.
     * </pre>
     *
     * <code>bool is_monotonic = 3;</code>
     * @return The isMonotonic.
     */
    @java.lang.Override
    public boolean getIsMonotonic() {
      return isMonotonic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        output.writeEnum(2, aggregationTemporality_);
      }
      if (isMonotonic_ != false) {
        output.writeBool(3, isMonotonic_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, aggregationTemporality_);
      }
      if (isMonotonic_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isMonotonic_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Sum)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.Sum other = (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (aggregationTemporality_ != other.aggregationTemporality_) return false;
      if (getIsMonotonic()
          != other.getIsMonotonic()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (37 * hash) + AGGREGATION_TEMPORALITY_FIELD_NUMBER;
      hash = (53 * hash) + aggregationTemporality_;
      hash = (37 * hash) + IS_MONOTONIC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsMonotonic());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.Sum prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Sum represents the type of a numeric double scalar metric that is calculated
     * as a sum of all reported measurements over a time interval.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.Sum}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.Sum)
        io.jaegertracing.api_v2.metrics.Otelmetric.SumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Sum_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Sum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.Sum.class, io.jaegertracing.api_v2.metrics.Otelmetric.Sum.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.Sum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        aggregationTemporality_ = 0;

        isMonotonic_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Sum_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Sum getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Sum build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Sum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Sum buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Sum result = new io.jaegertracing.api_v2.metrics.Otelmetric.Sum(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        result.aggregationTemporality_ = aggregationTemporality_;
        result.isMonotonic_ = isMonotonic_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Sum) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Sum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.Sum other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.Sum.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        if (other.aggregationTemporality_ != 0) {
          setAggregationTemporalityValue(other.getAggregationTemporalityValue());
        }
        if (other.getIsMonotonic() != false) {
          setIsMonotonic(other.getIsMonotonic());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.Sum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.Sum) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.NumberDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }

      private int aggregationTemporality_ = 0;
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The enum numeric value on the wire for aggregationTemporality.
       */
      @java.lang.Override public int getAggregationTemporalityValue() {
        return aggregationTemporality_;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The enum numeric value on the wire for aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporalityValue(int value) {
        
        aggregationTemporality_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The aggregationTemporality.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
        @SuppressWarnings("deprecation")
        io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
        return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporality(io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        aggregationTemporality_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAggregationTemporality() {
        
        aggregationTemporality_ = 0;
        onChanged();
        return this;
      }

      private boolean isMonotonic_ ;
      /**
       * <pre>
       * If "true" means that the sum is monotonic.
       * </pre>
       *
       * <code>bool is_monotonic = 3;</code>
       * @return The isMonotonic.
       */
      @java.lang.Override
      public boolean getIsMonotonic() {
        return isMonotonic_;
      }
      /**
       * <pre>
       * If "true" means that the sum is monotonic.
       * </pre>
       *
       * <code>bool is_monotonic = 3;</code>
       * @param value The isMonotonic to set.
       * @return This builder for chaining.
       */
      public Builder setIsMonotonic(boolean value) {
        
        isMonotonic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If "true" means that the sum is monotonic.
       * </pre>
       *
       * <code>bool is_monotonic = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsMonotonic() {
        
        isMonotonic_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.Sum)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.Sum)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.Sum DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.Sum();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Sum getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Sum>
        PARSER = new com.google.protobuf.AbstractParser<Sum>() {
      @java.lang.Override
      public Sum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sum(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Sum> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sum> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Sum getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface IntHistogramOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.IntHistogram)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder getDataPointsOrBuilder(
        int index);

    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    int getAggregationTemporalityValue();
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality();
  }
  /**
   * <pre>
   * IntHistogram is deprecated, replaced by Histogram points using double-
   * valued exemplars.
   * This represents the type of a metric that is calculated by aggregating as a
   * Histogram of all reported int measurements over a time interval.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.IntHistogram}
   */
  @java.lang.Deprecated public static final class IntHistogram extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.IntHistogram)
      IntHistogramOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntHistogram.newBuilder() to construct.
    private IntHistogram(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntHistogram() {
      dataPoints_ = java.util.Collections.emptyList();
      aggregationTemporality_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntHistogram();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntHistogram(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.parser(), extensionRegistry));
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              aggregationTemporality_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogram_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogram_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    public static final int AGGREGATION_TEMPORALITY_FIELD_NUMBER = 2;
    private int aggregationTemporality_;
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    @java.lang.Override public int getAggregationTemporalityValue() {
      return aggregationTemporality_;
    }
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    @java.lang.Override public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
      @SuppressWarnings("deprecation")
      io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
      return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        output.writeEnum(2, aggregationTemporality_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, aggregationTemporality_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram other = (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (aggregationTemporality_ != other.aggregationTemporality_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (37 * hash) + AGGREGATION_TEMPORALITY_FIELD_NUMBER;
      hash = (53 * hash) + aggregationTemporality_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IntHistogram is deprecated, replaced by Histogram points using double-
     * valued exemplars.
     * This represents the type of a metric that is calculated by aggregating as a
     * Histogram of all reported int measurements over a time interval.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.IntHistogram}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.IntHistogram)
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogram_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogram_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        aggregationTemporality_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogram_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram result = new io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        result.aggregationTemporality_ = aggregationTemporality_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        if (other.aggregationTemporality_ != 0) {
          setAggregationTemporalityValue(other.getAggregationTemporalityValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.IntHistogramDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }

      private int aggregationTemporality_ = 0;
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The enum numeric value on the wire for aggregationTemporality.
       */
      @java.lang.Override public int getAggregationTemporalityValue() {
        return aggregationTemporality_;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The enum numeric value on the wire for aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporalityValue(int value) {
        
        aggregationTemporality_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The aggregationTemporality.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
        @SuppressWarnings("deprecation")
        io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
        return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporality(io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        aggregationTemporality_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAggregationTemporality() {
        
        aggregationTemporality_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.IntHistogram)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.IntHistogram)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntHistogram>
        PARSER = new com.google.protobuf.AbstractParser<IntHistogram>() {
      @java.lang.Override
      public IntHistogram parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntHistogram(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntHistogram> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntHistogram> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogram getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HistogramOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.Histogram)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder getDataPointsOrBuilder(
        int index);

    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    int getAggregationTemporalityValue();
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality();
  }
  /**
   * <pre>
   * Histogram represents the type of a metric that is calculated by aggregating as a
   * Histogram of all reported double measurements over a time interval.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.Histogram}
   */
  public static final class Histogram extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.Histogram)
      HistogramOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Histogram.newBuilder() to construct.
    private Histogram(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Histogram() {
      dataPoints_ = java.util.Collections.emptyList();
      aggregationTemporality_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Histogram();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Histogram(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.parser(), extensionRegistry));
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              aggregationTemporality_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Histogram_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Histogram_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.class, io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    public static final int AGGREGATION_TEMPORALITY_FIELD_NUMBER = 2;
    private int aggregationTemporality_;
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The enum numeric value on the wire for aggregationTemporality.
     */
    @java.lang.Override public int getAggregationTemporalityValue() {
      return aggregationTemporality_;
    }
    /**
     * <pre>
     * aggregation_temporality describes if the aggregator reports delta changes
     * since last report time, or cumulative changes since a fixed start time.
     * </pre>
     *
     * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
     * @return The aggregationTemporality.
     */
    @java.lang.Override public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
      @SuppressWarnings("deprecation")
      io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
      return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        output.writeEnum(2, aggregationTemporality_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      if (aggregationTemporality_ != io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.AGGREGATION_TEMPORALITY_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, aggregationTemporality_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Histogram)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.Histogram other = (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (aggregationTemporality_ != other.aggregationTemporality_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (37 * hash) + AGGREGATION_TEMPORALITY_FIELD_NUMBER;
      hash = (53 * hash) + aggregationTemporality_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.Histogram prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Histogram represents the type of a metric that is calculated by aggregating as a
     * Histogram of all reported double measurements over a time interval.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.Histogram}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.Histogram)
        io.jaegertracing.api_v2.metrics.Otelmetric.HistogramOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Histogram_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Histogram_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.class, io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        aggregationTemporality_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Histogram_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Histogram result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Histogram result = new io.jaegertracing.api_v2.metrics.Otelmetric.Histogram(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        result.aggregationTemporality_ = aggregationTemporality_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Histogram)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.Histogram other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.Histogram.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        if (other.aggregationTemporality_ != 0) {
          setAggregationTemporalityValue(other.getAggregationTemporalityValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.Histogram parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.Histogram) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.HistogramDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }

      private int aggregationTemporality_ = 0;
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The enum numeric value on the wire for aggregationTemporality.
       */
      @java.lang.Override public int getAggregationTemporalityValue() {
        return aggregationTemporality_;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The enum numeric value on the wire for aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporalityValue(int value) {
        
        aggregationTemporality_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return The aggregationTemporality.
       */
      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality getAggregationTemporality() {
        @SuppressWarnings("deprecation")
        io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality result = io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.valueOf(aggregationTemporality_);
        return result == null ? io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @param value The aggregationTemporality to set.
       * @return This builder for chaining.
       */
      public Builder setAggregationTemporality(io.jaegertracing.api_v2.metrics.Otelmetric.AggregationTemporality value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        aggregationTemporality_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * aggregation_temporality describes if the aggregator reports delta changes
       * since last report time, or cumulative changes since a fixed start time.
       * </pre>
       *
       * <code>.jaeger.api_v2.metrics.AggregationTemporality aggregation_temporality = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAggregationTemporality() {
        
        aggregationTemporality_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.Histogram)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.Histogram)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.Histogram DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.Histogram();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Histogram getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Histogram>
        PARSER = new com.google.protobuf.AbstractParser<Histogram>() {
      @java.lang.Override
      public Histogram parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Histogram(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Histogram> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Histogram> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Histogram getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SummaryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.Summary)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint> 
        getDataPointsList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint getDataPoints(int index);
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    int getDataPointsCount();
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder> 
        getDataPointsOrBuilderList();
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder getDataPointsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Summary metric data are used to convey quantile summaries,
   * a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary)
   * and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45)
   * data type. These data points cannot always be merged in a meaningful way.
   * While they can be useful in some applications, histogram data points are
   * recommended for new applications.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.Summary}
   */
  public static final class Summary extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.Summary)
      SummaryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Summary.newBuilder() to construct.
    private Summary(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Summary() {
      dataPoints_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Summary();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Summary(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint>();
                mutable_bitField0_ |= 0x00000001;
              }
              dataPoints_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Summary_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Summary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.Summary.class, io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder.class);
    }

    public static final int DATA_POINTS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint> dataPoints_;
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint> getDataPointsList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder> 
        getDataPointsOrBuilderList() {
      return dataPoints_;
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public int getDataPointsCount() {
      return dataPoints_.size();
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint getDataPoints(int index) {
      return dataPoints_.get(index);
    }
    /**
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder getDataPointsOrBuilder(
        int index) {
      return dataPoints_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dataPoints_.size(); i++) {
        output.writeMessage(1, dataPoints_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dataPoints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dataPoints_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Summary)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.Summary other = (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) obj;

      if (!getDataPointsList()
          .equals(other.getDataPointsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataPointsCount() > 0) {
        hash = (37 * hash) + DATA_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getDataPointsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.Summary prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Summary metric data are used to convey quantile summaries,
     * a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary)
     * and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45)
     * data type. These data points cannot always be merged in a meaningful way.
     * While they can be useful in some applications, histogram data points are
     * recommended for new applications.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.Summary}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.Summary)
        io.jaegertracing.api_v2.metrics.Otelmetric.SummaryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Summary_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Summary_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.Summary.class, io.jaegertracing.api_v2.metrics.Otelmetric.Summary.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.Summary.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDataPointsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Summary_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Summary getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Summary build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Summary result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Summary buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Summary result = new io.jaegertracing.api_v2.metrics.Otelmetric.Summary(this);
        int from_bitField0_ = bitField0_;
        if (dataPointsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dataPoints_ = java.util.Collections.unmodifiableList(dataPoints_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dataPoints_ = dataPoints_;
        } else {
          result.dataPoints_ = dataPointsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Summary) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Summary)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.Summary other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.Summary.getDefaultInstance()) return this;
        if (dataPointsBuilder_ == null) {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPoints_.isEmpty()) {
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataPointsIsMutable();
              dataPoints_.addAll(other.dataPoints_);
            }
            onChanged();
          }
        } else {
          if (!other.dataPoints_.isEmpty()) {
            if (dataPointsBuilder_.isEmpty()) {
              dataPointsBuilder_.dispose();
              dataPointsBuilder_ = null;
              dataPoints_ = other.dataPoints_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataPointsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDataPointsFieldBuilder() : null;
            } else {
              dataPointsBuilder_.addAllMessages(other.dataPoints_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.Summary parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.Summary) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint> dataPoints_ =
        java.util.Collections.emptyList();
      private void ensureDataPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataPoints_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint>(dataPoints_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder> dataPointsBuilder_;

      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint> getDataPointsList() {
        if (dataPointsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dataPoints_);
        } else {
          return dataPointsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public int getDataPointsCount() {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.size();
        } else {
          return dataPointsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint getDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);
        } else {
          return dataPointsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.set(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder setDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint value) {
        if (dataPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataPointsIsMutable();
          dataPoints_.add(index, value);
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder addDataPoints(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder builderForValue) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataPointsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder addAllDataPoints(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint> values) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dataPoints_);
          onChanged();
        } else {
          dataPointsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder clearDataPoints() {
        if (dataPointsBuilder_ == null) {
          dataPoints_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public Builder removeDataPoints(int index) {
        if (dataPointsBuilder_ == null) {
          ensureDataPointsIsMutable();
          dataPoints_.remove(index);
          onChanged();
        } else {
          dataPointsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder getDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder getDataPointsOrBuilder(
          int index) {
        if (dataPointsBuilder_ == null) {
          return dataPoints_.get(index);  } else {
          return dataPointsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder> 
           getDataPointsOrBuilderList() {
        if (dataPointsBuilder_ != null) {
          return dataPointsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dataPoints_);
        }
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder addDataPointsBuilder() {
        return getDataPointsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder addDataPointsBuilder(
          int index) {
        return getDataPointsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint data_points = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder> 
           getDataPointsBuilderList() {
        return getDataPointsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder> 
          getDataPointsFieldBuilder() {
        if (dataPointsBuilder_ == null) {
          dataPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder>(
                  dataPoints_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dataPoints_ = null;
        }
        return dataPointsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.Summary)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.Summary)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.Summary DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.Summary();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Summary getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Summary>
        PARSER = new com.google.protobuf.AbstractParser<Summary>() {
      @java.lang.Override
      public Summary parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Summary(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Summary> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Summary> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Summary getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface IntDataPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.IntDataPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getLabelsList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index);
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * value itself.
     * </pre>
     *
     * <code>sfixed64 value = 4;</code>
     * @return The value.
     */
    long getValue();

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> 
        getExemplarsList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getExemplars(int index);
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    int getExemplarsCount();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
        getExemplarsOrBuilderList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder getExemplarsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * IntDataPoint is a single data point in a timeseries that describes the
   * time-varying values of a int64 metric.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.IntDataPoint}
   */
  @java.lang.Deprecated public static final class IntDataPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.IntDataPoint)
      IntDataPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntDataPoint.newBuilder() to construct.
    private IntDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntDataPoint() {
      labels_ = java.util.Collections.emptyList();
      exemplars_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntDataPoint();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntDataPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              labels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              startTimeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 33: {

              value_ = input.readSFixed64();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar>();
                mutable_bitField0_ |= 0x00000002;
              }
              exemplars_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder.class);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_;
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public int getLabelsCount() {
      return labels_.size();
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
      return labels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index) {
      return labels_.get(index);
    }

    public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long startTimeUnixNano_;
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @java.lang.Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int VALUE_FIELD_NUMBER = 4;
    private long value_;
    /**
     * <pre>
     * value itself.
     * </pre>
     *
     * <code>sfixed64 value = 4;</code>
     * @return The value.
     */
    @java.lang.Override
    public long getValue() {
      return value_;
    }

    public static final int EXEMPLARS_FIELD_NUMBER = 5;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> exemplars_;
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> getExemplarsList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
        getExemplarsOrBuilderList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public int getExemplarsCount() {
      return exemplars_.size();
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getExemplars(int index) {
      return exemplars_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      return exemplars_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < labels_.size(); i++) {
        output.writeMessage(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        output.writeFixed64(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(3, timeUnixNano_);
      }
      if (value_ != 0L) {
        output.writeSFixed64(4, value_);
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        output.writeMessage(5, exemplars_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < labels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, timeUnixNano_);
      }
      if (value_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(4, value_);
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, exemplars_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint other = (io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint) obj;

      if (!getLabelsList()
          .equals(other.getLabelsList())) return false;
      if (getStartTimeUnixNano()
          != other.getStartTimeUnixNano()) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (getValue()
          != other.getValue()) return false;
      if (!getExemplarsList()
          .equals(other.getExemplarsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsCount() > 0) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsList().hashCode();
      }
      hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTimeUnixNano());
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getValue());
      if (getExemplarsCount() > 0) {
        hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
        hash = (53 * hash) + getExemplarsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IntDataPoint is a single data point in a timeseries that describes the
     * time-varying values of a int64 metric.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.IntDataPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.IntDataPoint)
        io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntDataPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntDataPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLabelsFieldBuilder();
          getExemplarsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          labelsBuilder_.clear();
        }
        startTimeUnixNano_ = 0L;

        timeUnixNano_ = 0L;

        value_ = 0L;

        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntDataPoint_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint result = new io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint(this);
        int from_bitField0_ = bitField0_;
        if (labelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            labels_ = java.util.Collections.unmodifiableList(labels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.labels_ = labels_;
        } else {
          result.labels_ = labelsBuilder_.build();
        }
        result.startTimeUnixNano_ = startTimeUnixNano_;
        result.timeUnixNano_ = timeUnixNano_;
        result.value_ = value_;
        if (exemplarsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.exemplars_ = exemplars_;
        } else {
          result.exemplars_ = exemplarsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint.getDefaultInstance()) return this;
        if (labelsBuilder_ == null) {
          if (!other.labels_.isEmpty()) {
            if (labels_.isEmpty()) {
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLabelsIsMutable();
              labels_.addAll(other.labels_);
            }
            onChanged();
          }
        } else {
          if (!other.labels_.isEmpty()) {
            if (labelsBuilder_.isEmpty()) {
              labelsBuilder_.dispose();
              labelsBuilder_ = null;
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              labelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLabelsFieldBuilder() : null;
            } else {
              labelsBuilder_.addAllMessages(other.labels_);
            }
          }
        }
        if (other.getStartTimeUnixNano() != 0L) {
          setStartTimeUnixNano(other.getStartTimeUnixNano());
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (other.getValue() != 0L) {
          setValue(other.getValue());
        }
        if (exemplarsBuilder_ == null) {
          if (!other.exemplars_.isEmpty()) {
            if (exemplars_.isEmpty()) {
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureExemplarsIsMutable();
              exemplars_.addAll(other.exemplars_);
            }
            onChanged();
          }
        } else {
          if (!other.exemplars_.isEmpty()) {
            if (exemplarsBuilder_.isEmpty()) {
              exemplarsBuilder_.dispose();
              exemplarsBuilder_ = null;
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000002);
              exemplarsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExemplarsFieldBuilder() : null;
            } else {
              exemplarsBuilder_.addAllMessages(other.exemplars_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_ =
        java.util.Collections.emptyList();
      private void ensureLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(labels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> labelsBuilder_;

      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
        if (labelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(labels_);
        } else {
          return labelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public int getLabelsCount() {
        if (labelsBuilder_ == null) {
          return labels_.size();
        } else {
          return labelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);
        } else {
          return labelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.set(index, value);
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(index, value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addAllLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, labels_);
          onChanged();
        } else {
          labelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder clearLabels() {
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          labelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder removeLabels(int index) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.remove(index);
          onChanged();
        } else {
          labelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
          int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);  } else {
          return labelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getLabelsOrBuilderList() {
        if (labelsBuilder_ != null) {
          return labelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(labels_);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder() {
        return getLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getLabelsBuilderList() {
        return getLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getLabelsFieldBuilder() {
        if (labelsBuilder_ == null) {
          labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  labels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          labels_ = null;
        }
        return labelsBuilder_;
      }

      private long startTimeUnixNano_ ;
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return The startTimeUnixNano.
       */
      @java.lang.Override
      public long getStartTimeUnixNano() {
        return startTimeUnixNano_;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @param value The startTimeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setStartTimeUnixNano(long value) {
        
        startTimeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartTimeUnixNano() {
        
        startTimeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long value_ ;
      /**
       * <pre>
       * value itself.
       * </pre>
       *
       * <code>sfixed64 value = 4;</code>
       * @return The value.
       */
      @java.lang.Override
      public long getValue() {
        return value_;
      }
      /**
       * <pre>
       * value itself.
       * </pre>
       *
       * <code>sfixed64 value = 4;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(long value) {
        
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * value itself.
       * </pre>
       *
       * <code>sfixed64 value = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> exemplars_ =
        java.util.Collections.emptyList();
      private void ensureExemplarsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar>(exemplars_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> exemplarsBuilder_;

      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> getExemplarsList() {
        if (exemplarsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exemplars_);
        } else {
          return exemplarsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public int getExemplarsCount() {
        if (exemplarsBuilder_ == null) {
          return exemplars_.size();
        } else {
          return exemplarsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);
        } else {
          return exemplarsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.set(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.set(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder addExemplars(io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder addExemplars(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder addAllExemplars(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> values) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exemplars_);
          onChanged();
        } else {
          exemplarsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder clearExemplars() {
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public Builder removeExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.remove(index);
          onChanged();
        } else {
          exemplarsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder getExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder getExemplarsOrBuilder(
          int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);  } else {
          return exemplarsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
           getExemplarsOrBuilderList() {
        if (exemplarsBuilder_ != null) {
          return exemplarsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exemplars_);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder addExemplarsBuilder() {
        return getExemplarsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder addExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 5;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder> 
           getExemplarsBuilderList() {
        return getExemplarsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
          getExemplarsFieldBuilder() {
        if (exemplarsBuilder_ == null) {
          exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder>(
                  exemplars_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          exemplars_ = null;
        }
        return exemplarsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.IntDataPoint)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.IntDataPoint)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntDataPoint>
        PARSER = new com.google.protobuf.AbstractParser<IntDataPoint>() {
      @java.lang.Override
      public IntDataPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntDataPoint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntDataPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntDataPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntDataPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NumberDataPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.NumberDataPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getLabelsList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index);
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <code>double as_double = 4;</code>
     * @return Whether the asDouble field is set.
     */
    boolean hasAsDouble();
    /**
     * <code>double as_double = 4;</code>
     * @return The asDouble.
     */
    double getAsDouble();

    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return Whether the asInt field is set.
     */
    boolean hasAsInt();
    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return The asInt.
     */
    long getAsInt();

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> 
        getExemplarsList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getExemplars(int index);
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    int getExemplarsCount();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
        getExemplarsOrBuilderList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder getExemplarsOrBuilder(
        int index);

    public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.ValueCase getValueCase();
  }
  /**
   * <pre>
   * NumberDataPoint is a single data point in a timeseries that describes the
   * time-varying value of a double metric.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.NumberDataPoint}
   */
  public static final class NumberDataPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.NumberDataPoint)
      NumberDataPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NumberDataPoint.newBuilder() to construct.
    private NumberDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NumberDataPoint() {
      labels_ = java.util.Collections.emptyList();
      exemplars_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new NumberDataPoint();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NumberDataPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              labels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              startTimeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 33: {
              value_ = input.readDouble();
              valueCase_ = 4;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar>();
                mutable_bitField0_ |= 0x00000002;
              }
              exemplars_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.parser(), extensionRegistry));
              break;
            }
            case 49: {
              value_ = input.readSFixed64();
              valueCase_ = 6;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_NumberDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_NumberDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder.class);
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      AS_DOUBLE(4),
      AS_INT(6),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 4: return AS_DOUBLE;
          case 6: return AS_INT;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_;
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public int getLabelsCount() {
      return labels_.size();
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
      return labels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index) {
      return labels_.get(index);
    }

    public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long startTimeUnixNano_;
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @java.lang.Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int AS_DOUBLE_FIELD_NUMBER = 4;
    /**
     * <code>double as_double = 4;</code>
     * @return Whether the asDouble field is set.
     */
    @java.lang.Override
    public boolean hasAsDouble() {
      return valueCase_ == 4;
    }
    /**
     * <code>double as_double = 4;</code>
     * @return The asDouble.
     */
    @java.lang.Override
    public double getAsDouble() {
      if (valueCase_ == 4) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int AS_INT_FIELD_NUMBER = 6;
    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return Whether the asInt field is set.
     */
    @java.lang.Override
    public boolean hasAsInt() {
      return valueCase_ == 6;
    }
    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return The asInt.
     */
    @java.lang.Override
    public long getAsInt() {
      if (valueCase_ == 6) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int EXEMPLARS_FIELD_NUMBER = 5;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> exemplars_;
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> getExemplarsList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
        getExemplarsOrBuilderList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public int getExemplarsCount() {
      return exemplars_.size();
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getExemplars(int index) {
      return exemplars_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      return exemplars_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < labels_.size(); i++) {
        output.writeMessage(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        output.writeFixed64(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(3, timeUnixNano_);
      }
      if (valueCase_ == 4) {
        output.writeDouble(
            4, (double)((java.lang.Double) value_));
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        output.writeMessage(5, exemplars_.get(i));
      }
      if (valueCase_ == 6) {
        output.writeSFixed64(
            6, (long)((java.lang.Long) value_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < labels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, timeUnixNano_);
      }
      if (valueCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              4, (double)((java.lang.Double) value_));
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, exemplars_.get(i));
      }
      if (valueCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(
              6, (long)((java.lang.Long) value_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint other = (io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint) obj;

      if (!getLabelsList()
          .equals(other.getLabelsList())) return false;
      if (getStartTimeUnixNano()
          != other.getStartTimeUnixNano()) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (!getExemplarsList()
          .equals(other.getExemplarsList())) return false;
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 4:
          if (java.lang.Double.doubleToLongBits(getAsDouble())
              != java.lang.Double.doubleToLongBits(
                  other.getAsDouble())) return false;
          break;
        case 6:
          if (getAsInt()
              != other.getAsInt()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsCount() > 0) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsList().hashCode();
      }
      hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTimeUnixNano());
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      if (getExemplarsCount() > 0) {
        hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
        hash = (53 * hash) + getExemplarsList().hashCode();
      }
      switch (valueCase_) {
        case 4:
          hash = (37 * hash) + AS_DOUBLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getAsDouble()));
          break;
        case 6:
          hash = (37 * hash) + AS_INT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getAsInt());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * NumberDataPoint is a single data point in a timeseries that describes the
     * time-varying value of a double metric.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.NumberDataPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.NumberDataPoint)
        io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_NumberDataPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_NumberDataPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLabelsFieldBuilder();
          getExemplarsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          labelsBuilder_.clear();
        }
        startTimeUnixNano_ = 0L;

        timeUnixNano_ = 0L;

        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          exemplarsBuilder_.clear();
        }
        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_NumberDataPoint_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint result = new io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint(this);
        int from_bitField0_ = bitField0_;
        if (labelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            labels_ = java.util.Collections.unmodifiableList(labels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.labels_ = labels_;
        } else {
          result.labels_ = labelsBuilder_.build();
        }
        result.startTimeUnixNano_ = startTimeUnixNano_;
        result.timeUnixNano_ = timeUnixNano_;
        if (valueCase_ == 4) {
          result.value_ = value_;
        }
        if (valueCase_ == 6) {
          result.value_ = value_;
        }
        if (exemplarsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.exemplars_ = exemplars_;
        } else {
          result.exemplars_ = exemplarsBuilder_.build();
        }
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint.getDefaultInstance()) return this;
        if (labelsBuilder_ == null) {
          if (!other.labels_.isEmpty()) {
            if (labels_.isEmpty()) {
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLabelsIsMutable();
              labels_.addAll(other.labels_);
            }
            onChanged();
          }
        } else {
          if (!other.labels_.isEmpty()) {
            if (labelsBuilder_.isEmpty()) {
              labelsBuilder_.dispose();
              labelsBuilder_ = null;
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              labelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLabelsFieldBuilder() : null;
            } else {
              labelsBuilder_.addAllMessages(other.labels_);
            }
          }
        }
        if (other.getStartTimeUnixNano() != 0L) {
          setStartTimeUnixNano(other.getStartTimeUnixNano());
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (exemplarsBuilder_ == null) {
          if (!other.exemplars_.isEmpty()) {
            if (exemplars_.isEmpty()) {
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureExemplarsIsMutable();
              exemplars_.addAll(other.exemplars_);
            }
            onChanged();
          }
        } else {
          if (!other.exemplars_.isEmpty()) {
            if (exemplarsBuilder_.isEmpty()) {
              exemplarsBuilder_.dispose();
              exemplarsBuilder_ = null;
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000002);
              exemplarsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExemplarsFieldBuilder() : null;
            } else {
              exemplarsBuilder_.addAllMessages(other.exemplars_);
            }
          }
        }
        switch (other.getValueCase()) {
          case AS_DOUBLE: {
            setAsDouble(other.getAsDouble());
            break;
          }
          case AS_INT: {
            setAsInt(other.getAsInt());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_ =
        java.util.Collections.emptyList();
      private void ensureLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(labels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> labelsBuilder_;

      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
        if (labelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(labels_);
        } else {
          return labelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public int getLabelsCount() {
        if (labelsBuilder_ == null) {
          return labels_.size();
        } else {
          return labelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);
        } else {
          return labelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.set(index, value);
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(index, value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addAllLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, labels_);
          onChanged();
        } else {
          labelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder clearLabels() {
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          labelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder removeLabels(int index) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.remove(index);
          onChanged();
        } else {
          labelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
          int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);  } else {
          return labelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getLabelsOrBuilderList() {
        if (labelsBuilder_ != null) {
          return labelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(labels_);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder() {
        return getLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getLabelsBuilderList() {
        return getLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getLabelsFieldBuilder() {
        if (labelsBuilder_ == null) {
          labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  labels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          labels_ = null;
        }
        return labelsBuilder_;
      }

      private long startTimeUnixNano_ ;
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return The startTimeUnixNano.
       */
      @java.lang.Override
      public long getStartTimeUnixNano() {
        return startTimeUnixNano_;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @param value The startTimeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setStartTimeUnixNano(long value) {
        
        startTimeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartTimeUnixNano() {
        
        startTimeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <code>double as_double = 4;</code>
       * @return Whether the asDouble field is set.
       */
      public boolean hasAsDouble() {
        return valueCase_ == 4;
      }
      /**
       * <code>double as_double = 4;</code>
       * @return The asDouble.
       */
      public double getAsDouble() {
        if (valueCase_ == 4) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>double as_double = 4;</code>
       * @param value The asDouble to set.
       * @return This builder for chaining.
       */
      public Builder setAsDouble(double value) {
        valueCase_ = 4;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double as_double = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAsDouble() {
        if (valueCase_ == 4) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>sfixed64 as_int = 6;</code>
       * @return Whether the asInt field is set.
       */
      public boolean hasAsInt() {
        return valueCase_ == 6;
      }
      /**
       * <code>sfixed64 as_int = 6;</code>
       * @return The asInt.
       */
      public long getAsInt() {
        if (valueCase_ == 6) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>sfixed64 as_int = 6;</code>
       * @param value The asInt to set.
       * @return This builder for chaining.
       */
      public Builder setAsInt(long value) {
        valueCase_ = 6;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed64 as_int = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearAsInt() {
        if (valueCase_ == 6) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> exemplars_ =
        java.util.Collections.emptyList();
      private void ensureExemplarsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar>(exemplars_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> exemplarsBuilder_;

      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> getExemplarsList() {
        if (exemplarsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exemplars_);
        } else {
          return exemplarsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public int getExemplarsCount() {
        if (exemplarsBuilder_ == null) {
          return exemplars_.size();
        } else {
          return exemplarsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);
        } else {
          return exemplarsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.set(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.set(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder addExemplars(io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder addExemplars(
          io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder addAllExemplars(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> values) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exemplars_);
          onChanged();
        } else {
          exemplarsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder clearExemplars() {
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public Builder removeExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.remove(index);
          onChanged();
        } else {
          exemplarsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder getExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder getExemplarsOrBuilder(
          int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);  } else {
          return exemplarsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
           getExemplarsOrBuilderList() {
        if (exemplarsBuilder_ != null) {
          return exemplarsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exemplars_);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder addExemplarsBuilder() {
        return getExemplarsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder addExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 5;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder> 
           getExemplarsBuilderList() {
        return getExemplarsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
          getExemplarsFieldBuilder() {
        if (exemplarsBuilder_ == null) {
          exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder>(
                  exemplars_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          exemplars_ = null;
        }
        return exemplarsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.NumberDataPoint)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.NumberDataPoint)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NumberDataPoint>
        PARSER = new com.google.protobuf.AbstractParser<NumberDataPoint>() {
      @java.lang.Override
      public NumberDataPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NumberDataPoint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NumberDataPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NumberDataPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.NumberDataPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface IntHistogramDataPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.IntHistogramDataPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getLabelsList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index);
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative. This
     * value must be equal to the sum of the "count" fields in buckets if a
     * histogram is provided.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    long getCount();

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero. This value must be equal to the sum of the "sum" fields in
     * buckets if a histogram is provided.
     * </pre>
     *
     * <code>sfixed64 sum = 5;</code>
     * @return The sum.
     */
    long getSum();

    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return A list containing the bucketCounts.
     */
    java.util.List<java.lang.Long> getBucketCountsList();
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return The count of bucketCounts.
     */
    int getBucketCountsCount();
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @param index The index of the element to return.
     * @return The bucketCounts at the given index.
     */
    long getBucketCounts(int index);

    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return A list containing the explicitBounds.
     */
    java.util.List<java.lang.Double> getExplicitBoundsList();
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return The count of explicitBounds.
     */
    int getExplicitBoundsCount();
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @param index The index of the element to return.
     * @return The explicitBounds at the given index.
     */
    double getExplicitBounds(int index);

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> 
        getExemplarsList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getExemplars(int index);
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    int getExemplarsCount();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
        getExemplarsOrBuilderList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder getExemplarsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * IntHistogramDataPoint is deprecated; use HistogramDataPoint.
   * This is a single data point in a timeseries that describes
   * the time-varying values of a Histogram of int values. A Histogram contains
   * summary statistics for a population of values, it may optionally contain
   * the distribution of those values across a set of buckets.
   * If the histogram contains the distribution of values, then both
   * "explicit_bounds" and "bucket counts" fields must be defined.
   * If the histogram does not contain the distribution of values, then both
   * "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
   * "sum" are known.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.IntHistogramDataPoint}
   */
  @java.lang.Deprecated public static final class IntHistogramDataPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.IntHistogramDataPoint)
      IntHistogramDataPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntHistogramDataPoint.newBuilder() to construct.
    private IntHistogramDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntHistogramDataPoint() {
      labels_ = java.util.Collections.emptyList();
      bucketCounts_ = emptyLongList();
      explicitBounds_ = emptyDoubleList();
      exemplars_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntHistogramDataPoint();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntHistogramDataPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              labels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              startTimeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 33: {

              count_ = input.readFixed64();
              break;
            }
            case 41: {

              sum_ = input.readSFixed64();
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                bucketCounts_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              bucketCounts_.addLong(input.readFixed64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                bucketCounts_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucketCounts_.addLong(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 57: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                explicitBounds_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              explicitBounds_.addDouble(input.readDouble());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                explicitBounds_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                explicitBounds_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar>();
                mutable_bitField0_ |= 0x00000008;
              }
              exemplars_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          bucketCounts_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          explicitBounds_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder.class);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_;
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public int getLabelsCount() {
      return labels_.size();
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
      return labels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index) {
      return labels_.get(index);
    }

    public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long startTimeUnixNano_;
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @java.lang.Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int COUNT_FIELD_NUMBER = 4;
    private long count_;
    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative. This
     * value must be equal to the sum of the "count" fields in buckets if a
     * histogram is provided.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    @java.lang.Override
    public long getCount() {
      return count_;
    }

    public static final int SUM_FIELD_NUMBER = 5;
    private long sum_;
    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero. This value must be equal to the sum of the "sum" fields in
     * buckets if a histogram is provided.
     * </pre>
     *
     * <code>sfixed64 sum = 5;</code>
     * @return The sum.
     */
    @java.lang.Override
    public long getSum() {
      return sum_;
    }

    public static final int BUCKET_COUNTS_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.LongList bucketCounts_;
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return A list containing the bucketCounts.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getBucketCountsList() {
      return bucketCounts_;
    }
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return The count of bucketCounts.
     */
    public int getBucketCountsCount() {
      return bucketCounts_.size();
    }
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @param index The index of the element to return.
     * @return The bucketCounts at the given index.
     */
    public long getBucketCounts(int index) {
      return bucketCounts_.getLong(index);
    }
    private int bucketCountsMemoizedSerializedSize = -1;

    public static final int EXPLICIT_BOUNDS_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.DoubleList explicitBounds_;
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return A list containing the explicitBounds.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getExplicitBoundsList() {
      return explicitBounds_;
    }
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return The count of explicitBounds.
     */
    public int getExplicitBoundsCount() {
      return explicitBounds_.size();
    }
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @param index The index of the element to return.
     * @return The explicitBounds at the given index.
     */
    public double getExplicitBounds(int index) {
      return explicitBounds_.getDouble(index);
    }
    private int explicitBoundsMemoizedSerializedSize = -1;

    public static final int EXEMPLARS_FIELD_NUMBER = 8;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> exemplars_;
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> getExemplarsList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
        getExemplarsOrBuilderList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public int getExemplarsCount() {
      return exemplars_.size();
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getExemplars(int index) {
      return exemplars_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      return exemplars_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < labels_.size(); i++) {
        output.writeMessage(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        output.writeFixed64(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(3, timeUnixNano_);
      }
      if (count_ != 0L) {
        output.writeFixed64(4, count_);
      }
      if (sum_ != 0L) {
        output.writeSFixed64(5, sum_);
      }
      if (getBucketCountsList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(bucketCountsMemoizedSerializedSize);
      }
      for (int i = 0; i < bucketCounts_.size(); i++) {
        output.writeFixed64NoTag(bucketCounts_.getLong(i));
      }
      if (getExplicitBoundsList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(explicitBoundsMemoizedSerializedSize);
      }
      for (int i = 0; i < explicitBounds_.size(); i++) {
        output.writeDoubleNoTag(explicitBounds_.getDouble(i));
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        output.writeMessage(8, exemplars_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < labels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, timeUnixNano_);
      }
      if (count_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, count_);
      }
      if (sum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(5, sum_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBucketCountsList().size();
        size += dataSize;
        if (!getBucketCountsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bucketCountsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getExplicitBoundsList().size();
        size += dataSize;
        if (!getExplicitBoundsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        explicitBoundsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, exemplars_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint other = (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint) obj;

      if (!getLabelsList()
          .equals(other.getLabelsList())) return false;
      if (getStartTimeUnixNano()
          != other.getStartTimeUnixNano()) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (getCount()
          != other.getCount()) return false;
      if (getSum()
          != other.getSum()) return false;
      if (!getBucketCountsList()
          .equals(other.getBucketCountsList())) return false;
      if (!getExplicitBoundsList()
          .equals(other.getExplicitBoundsList())) return false;
      if (!getExemplarsList()
          .equals(other.getExemplarsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsCount() > 0) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsList().hashCode();
      }
      hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTimeUnixNano());
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCount());
      hash = (37 * hash) + SUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSum());
      if (getBucketCountsCount() > 0) {
        hash = (37 * hash) + BUCKET_COUNTS_FIELD_NUMBER;
        hash = (53 * hash) + getBucketCountsList().hashCode();
      }
      if (getExplicitBoundsCount() > 0) {
        hash = (37 * hash) + EXPLICIT_BOUNDS_FIELD_NUMBER;
        hash = (53 * hash) + getExplicitBoundsList().hashCode();
      }
      if (getExemplarsCount() > 0) {
        hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
        hash = (53 * hash) + getExemplarsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * IntHistogramDataPoint is deprecated; use HistogramDataPoint.
     * This is a single data point in a timeseries that describes
     * the time-varying values of a Histogram of int values. A Histogram contains
     * summary statistics for a population of values, it may optionally contain
     * the distribution of those values across a set of buckets.
     * If the histogram contains the distribution of values, then both
     * "explicit_bounds" and "bucket counts" fields must be defined.
     * If the histogram does not contain the distribution of values, then both
     * "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
     * "sum" are known.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.IntHistogramDataPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.IntHistogramDataPoint)
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLabelsFieldBuilder();
          getExemplarsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          labelsBuilder_.clear();
        }
        startTimeUnixNano_ = 0L;

        timeUnixNano_ = 0L;

        count_ = 0L;

        sum_ = 0L;

        bucketCounts_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        explicitBounds_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint result = new io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint(this);
        int from_bitField0_ = bitField0_;
        if (labelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            labels_ = java.util.Collections.unmodifiableList(labels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.labels_ = labels_;
        } else {
          result.labels_ = labelsBuilder_.build();
        }
        result.startTimeUnixNano_ = startTimeUnixNano_;
        result.timeUnixNano_ = timeUnixNano_;
        result.count_ = count_;
        result.sum_ = sum_;
        if (((bitField0_ & 0x00000002) != 0)) {
          bucketCounts_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bucketCounts_ = bucketCounts_;
        if (((bitField0_ & 0x00000004) != 0)) {
          explicitBounds_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.explicitBounds_ = explicitBounds_;
        if (exemplarsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.exemplars_ = exemplars_;
        } else {
          result.exemplars_ = exemplarsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint.getDefaultInstance()) return this;
        if (labelsBuilder_ == null) {
          if (!other.labels_.isEmpty()) {
            if (labels_.isEmpty()) {
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLabelsIsMutable();
              labels_.addAll(other.labels_);
            }
            onChanged();
          }
        } else {
          if (!other.labels_.isEmpty()) {
            if (labelsBuilder_.isEmpty()) {
              labelsBuilder_.dispose();
              labelsBuilder_ = null;
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              labelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLabelsFieldBuilder() : null;
            } else {
              labelsBuilder_.addAllMessages(other.labels_);
            }
          }
        }
        if (other.getStartTimeUnixNano() != 0L) {
          setStartTimeUnixNano(other.getStartTimeUnixNano());
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (other.getCount() != 0L) {
          setCount(other.getCount());
        }
        if (other.getSum() != 0L) {
          setSum(other.getSum());
        }
        if (!other.bucketCounts_.isEmpty()) {
          if (bucketCounts_.isEmpty()) {
            bucketCounts_ = other.bucketCounts_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBucketCountsIsMutable();
            bucketCounts_.addAll(other.bucketCounts_);
          }
          onChanged();
        }
        if (!other.explicitBounds_.isEmpty()) {
          if (explicitBounds_.isEmpty()) {
            explicitBounds_ = other.explicitBounds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureExplicitBoundsIsMutable();
            explicitBounds_.addAll(other.explicitBounds_);
          }
          onChanged();
        }
        if (exemplarsBuilder_ == null) {
          if (!other.exemplars_.isEmpty()) {
            if (exemplars_.isEmpty()) {
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureExemplarsIsMutable();
              exemplars_.addAll(other.exemplars_);
            }
            onChanged();
          }
        } else {
          if (!other.exemplars_.isEmpty()) {
            if (exemplarsBuilder_.isEmpty()) {
              exemplarsBuilder_.dispose();
              exemplarsBuilder_ = null;
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000008);
              exemplarsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExemplarsFieldBuilder() : null;
            } else {
              exemplarsBuilder_.addAllMessages(other.exemplars_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_ =
        java.util.Collections.emptyList();
      private void ensureLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(labels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> labelsBuilder_;

      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
        if (labelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(labels_);
        } else {
          return labelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public int getLabelsCount() {
        if (labelsBuilder_ == null) {
          return labels_.size();
        } else {
          return labelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);
        } else {
          return labelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.set(index, value);
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(index, value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addAllLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, labels_);
          onChanged();
        } else {
          labelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder clearLabels() {
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          labelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder removeLabels(int index) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.remove(index);
          onChanged();
        } else {
          labelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
          int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);  } else {
          return labelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getLabelsOrBuilderList() {
        if (labelsBuilder_ != null) {
          return labelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(labels_);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder() {
        return getLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getLabelsBuilderList() {
        return getLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getLabelsFieldBuilder() {
        if (labelsBuilder_ == null) {
          labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  labels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          labels_ = null;
        }
        return labelsBuilder_;
      }

      private long startTimeUnixNano_ ;
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return The startTimeUnixNano.
       */
      @java.lang.Override
      public long getStartTimeUnixNano() {
        return startTimeUnixNano_;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @param value The startTimeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setStartTimeUnixNano(long value) {
        
        startTimeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartTimeUnixNano() {
        
        startTimeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long count_ ;
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative. This
       * value must be equal to the sum of the "count" fields in buckets if a
       * histogram is provided.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @return The count.
       */
      @java.lang.Override
      public long getCount() {
        return count_;
      }
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative. This
       * value must be equal to the sum of the "count" fields in buckets if a
       * histogram is provided.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(long value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative. This
       * value must be equal to the sum of the "count" fields in buckets if a
       * histogram is provided.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0L;
        onChanged();
        return this;
      }

      private long sum_ ;
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero. This value must be equal to the sum of the "sum" fields in
       * buckets if a histogram is provided.
       * </pre>
       *
       * <code>sfixed64 sum = 5;</code>
       * @return The sum.
       */
      @java.lang.Override
      public long getSum() {
        return sum_;
      }
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero. This value must be equal to the sum of the "sum" fields in
       * buckets if a histogram is provided.
       * </pre>
       *
       * <code>sfixed64 sum = 5;</code>
       * @param value The sum to set.
       * @return This builder for chaining.
       */
      public Builder setSum(long value) {
        
        sum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero. This value must be equal to the sum of the "sum" fields in
       * buckets if a histogram is provided.
       * </pre>
       *
       * <code>sfixed64 sum = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSum() {
        
        sum_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bucketCounts_ = emptyLongList();
      private void ensureBucketCountsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          bucketCounts_ = mutableCopy(bucketCounts_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @return A list containing the bucketCounts.
       */
      public java.util.List<java.lang.Long>
          getBucketCountsList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(bucketCounts_) : bucketCounts_;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @return The count of bucketCounts.
       */
      public int getBucketCountsCount() {
        return bucketCounts_.size();
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param index The index of the element to return.
       * @return The bucketCounts at the given index.
       */
      public long getBucketCounts(int index) {
        return bucketCounts_.getLong(index);
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param index The index to set the value at.
       * @param value The bucketCounts to set.
       * @return This builder for chaining.
       */
      public Builder setBucketCounts(
          int index, long value) {
        ensureBucketCountsIsMutable();
        bucketCounts_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param value The bucketCounts to add.
       * @return This builder for chaining.
       */
      public Builder addBucketCounts(long value) {
        ensureBucketCountsIsMutable();
        bucketCounts_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param values The bucketCounts to add.
       * @return This builder for chaining.
       */
      public Builder addAllBucketCounts(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBucketCountsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucketCounts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBucketCounts() {
        bucketCounts_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList explicitBounds_ = emptyDoubleList();
      private void ensureExplicitBoundsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          explicitBounds_ = mutableCopy(explicitBounds_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @return A list containing the explicitBounds.
       */
      public java.util.List<java.lang.Double>
          getExplicitBoundsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(explicitBounds_) : explicitBounds_;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @return The count of explicitBounds.
       */
      public int getExplicitBoundsCount() {
        return explicitBounds_.size();
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param index The index of the element to return.
       * @return The explicitBounds at the given index.
       */
      public double getExplicitBounds(int index) {
        return explicitBounds_.getDouble(index);
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param index The index to set the value at.
       * @param value The explicitBounds to set.
       * @return This builder for chaining.
       */
      public Builder setExplicitBounds(
          int index, double value) {
        ensureExplicitBoundsIsMutable();
        explicitBounds_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param value The explicitBounds to add.
       * @return This builder for chaining.
       */
      public Builder addExplicitBounds(double value) {
        ensureExplicitBoundsIsMutable();
        explicitBounds_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param values The explicitBounds to add.
       * @return This builder for chaining.
       */
      public Builder addAllExplicitBounds(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureExplicitBoundsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, explicitBounds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearExplicitBounds() {
        explicitBounds_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> exemplars_ =
        java.util.Collections.emptyList();
      private void ensureExemplarsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar>(exemplars_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> exemplarsBuilder_;

      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> getExemplarsList() {
        if (exemplarsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exemplars_);
        } else {
          return exemplarsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public int getExemplarsCount() {
        if (exemplarsBuilder_ == null) {
          return exemplars_.size();
        } else {
          return exemplarsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);
        } else {
          return exemplarsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.set(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.set(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder addExemplars(io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder addExemplars(
          io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder addAllExemplars(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar> values) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exemplars_);
          onChanged();
        } else {
          exemplarsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder clearExemplars() {
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public Builder removeExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.remove(index);
          onChanged();
        } else {
          exemplarsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder getExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder getExemplarsOrBuilder(
          int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);  } else {
          return exemplarsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
           getExemplarsOrBuilderList() {
        if (exemplarsBuilder_ != null) {
          return exemplarsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exemplars_);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder addExemplarsBuilder() {
        return getExemplarsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder addExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.IntExemplar exemplars = 8;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder> 
           getExemplarsBuilderList() {
        return getExemplarsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder> 
          getExemplarsFieldBuilder() {
        if (exemplarsBuilder_ == null) {
          exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder>(
                  exemplars_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          exemplars_ = null;
        }
        return exemplarsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.IntHistogramDataPoint)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.IntHistogramDataPoint)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntHistogramDataPoint>
        PARSER = new com.google.protobuf.AbstractParser<IntHistogramDataPoint>() {
      @java.lang.Override
      public IntHistogramDataPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntHistogramDataPoint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntHistogramDataPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntHistogramDataPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntHistogramDataPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HistogramDataPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.HistogramDataPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getLabelsList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index);
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative. This
     * value must be equal to the sum of the "count" fields in buckets if a
     * histogram is provided.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    long getCount();

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero. This value must be equal to the sum of the "sum" fields in
     * buckets if a histogram is provided.
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @return The sum.
     */
    double getSum();

    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return A list containing the bucketCounts.
     */
    java.util.List<java.lang.Long> getBucketCountsList();
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return The count of bucketCounts.
     */
    int getBucketCountsCount();
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @param index The index of the element to return.
     * @return The bucketCounts at the given index.
     */
    long getBucketCounts(int index);

    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return A list containing the explicitBounds.
     */
    java.util.List<java.lang.Double> getExplicitBoundsList();
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return The count of explicitBounds.
     */
    int getExplicitBoundsCount();
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @param index The index of the element to return.
     * @return The explicitBounds at the given index.
     */
    double getExplicitBounds(int index);

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> 
        getExemplarsList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getExemplars(int index);
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    int getExemplarsCount();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
        getExemplarsOrBuilderList();
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder getExemplarsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * HistogramDataPoint is a single data point in a timeseries that describes the
   * time-varying values of a Histogram of double values. A Histogram contains
   * summary statistics for a population of values, it may optionally contain the
   * distribution of those values across a set of buckets.
   * If the histogram contains the distribution of values, then both
   * "explicit_bounds" and "bucket counts" fields must be defined.
   * If the histogram does not contain the distribution of values, then both
   * "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
   * "sum" are known.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.HistogramDataPoint}
   */
  public static final class HistogramDataPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.HistogramDataPoint)
      HistogramDataPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HistogramDataPoint.newBuilder() to construct.
    private HistogramDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HistogramDataPoint() {
      labels_ = java.util.Collections.emptyList();
      bucketCounts_ = emptyLongList();
      explicitBounds_ = emptyDoubleList();
      exemplars_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HistogramDataPoint();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HistogramDataPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              labels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              startTimeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 33: {

              count_ = input.readFixed64();
              break;
            }
            case 41: {

              sum_ = input.readDouble();
              break;
            }
            case 49: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                bucketCounts_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              bucketCounts_.addLong(input.readFixed64());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                bucketCounts_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucketCounts_.addLong(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 57: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                explicitBounds_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              explicitBounds_.addDouble(input.readDouble());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                explicitBounds_ = newDoubleList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                explicitBounds_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar>();
                mutable_bitField0_ |= 0x00000008;
              }
              exemplars_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          bucketCounts_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          explicitBounds_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_HistogramDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_HistogramDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder.class);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_;
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public int getLabelsCount() {
      return labels_.size();
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
      return labels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index) {
      return labels_.get(index);
    }

    public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long startTimeUnixNano_;
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @java.lang.Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int COUNT_FIELD_NUMBER = 4;
    private long count_;
    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative. This
     * value must be equal to the sum of the "count" fields in buckets if a
     * histogram is provided.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    @java.lang.Override
    public long getCount() {
      return count_;
    }

    public static final int SUM_FIELD_NUMBER = 5;
    private double sum_;
    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero. This value must be equal to the sum of the "sum" fields in
     * buckets if a histogram is provided.
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @return The sum.
     */
    @java.lang.Override
    public double getSum() {
      return sum_;
    }

    public static final int BUCKET_COUNTS_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.LongList bucketCounts_;
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return A list containing the bucketCounts.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getBucketCountsList() {
      return bucketCounts_;
    }
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @return The count of bucketCounts.
     */
    public int getBucketCountsCount() {
      return bucketCounts_.size();
    }
    /**
     * <pre>
     * bucket_counts is an optional field contains the count values of histogram
     * for each bucket.
     * The sum of the bucket_counts must equal the value in the count field.
     * The number of elements in bucket_counts array must be by one greater than
     * the number of elements in explicit_bounds array.
     * </pre>
     *
     * <code>repeated fixed64 bucket_counts = 6;</code>
     * @param index The index of the element to return.
     * @return The bucketCounts at the given index.
     */
    public long getBucketCounts(int index) {
      return bucketCounts_.getLong(index);
    }
    private int bucketCountsMemoizedSerializedSize = -1;

    public static final int EXPLICIT_BOUNDS_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.DoubleList explicitBounds_;
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return A list containing the explicitBounds.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getExplicitBoundsList() {
      return explicitBounds_;
    }
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @return The count of explicitBounds.
     */
    public int getExplicitBoundsCount() {
      return explicitBounds_.size();
    }
    /**
     * <pre>
     * explicit_bounds specifies buckets with explicitly defined bounds for values.
     * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
     * bucket at index i are:
     * (-infinity, explicit_bounds[i]] for i == 0
     * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
     * (explicit_bounds[i], +infinity) for i == N-1
     * The values in the explicit_bounds array must be strictly increasing.
     * Histogram buckets are inclusive of their upper boundary, except the last
     * bucket where the boundary is at infinity. This format is intentionally
     * compatible with the OpenMetrics histogram definition.
     * </pre>
     *
     * <code>repeated double explicit_bounds = 7;</code>
     * @param index The index of the element to return.
     * @return The explicitBounds at the given index.
     */
    public double getExplicitBounds(int index) {
      return explicitBounds_.getDouble(index);
    }
    private int explicitBoundsMemoizedSerializedSize = -1;

    public static final int EXEMPLARS_FIELD_NUMBER = 8;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> exemplars_;
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> getExemplarsList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
        getExemplarsOrBuilderList() {
      return exemplars_;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public int getExemplarsCount() {
      return exemplars_.size();
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getExemplars(int index) {
      return exemplars_.get(index);
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      return exemplars_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < labels_.size(); i++) {
        output.writeMessage(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        output.writeFixed64(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(3, timeUnixNano_);
      }
      if (count_ != 0L) {
        output.writeFixed64(4, count_);
      }
      if (java.lang.Double.doubleToRawLongBits(sum_) != 0) {
        output.writeDouble(5, sum_);
      }
      if (getBucketCountsList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(bucketCountsMemoizedSerializedSize);
      }
      for (int i = 0; i < bucketCounts_.size(); i++) {
        output.writeFixed64NoTag(bucketCounts_.getLong(i));
      }
      if (getExplicitBoundsList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(explicitBoundsMemoizedSerializedSize);
      }
      for (int i = 0; i < explicitBounds_.size(); i++) {
        output.writeDoubleNoTag(explicitBounds_.getDouble(i));
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        output.writeMessage(8, exemplars_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < labels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, timeUnixNano_);
      }
      if (count_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, count_);
      }
      if (java.lang.Double.doubleToRawLongBits(sum_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, sum_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBucketCountsList().size();
        size += dataSize;
        if (!getBucketCountsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bucketCountsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getExplicitBoundsList().size();
        size += dataSize;
        if (!getExplicitBoundsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        explicitBoundsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < exemplars_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, exemplars_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint other = (io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint) obj;

      if (!getLabelsList()
          .equals(other.getLabelsList())) return false;
      if (getStartTimeUnixNano()
          != other.getStartTimeUnixNano()) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (getCount()
          != other.getCount()) return false;
      if (java.lang.Double.doubleToLongBits(getSum())
          != java.lang.Double.doubleToLongBits(
              other.getSum())) return false;
      if (!getBucketCountsList()
          .equals(other.getBucketCountsList())) return false;
      if (!getExplicitBoundsList()
          .equals(other.getExplicitBoundsList())) return false;
      if (!getExemplarsList()
          .equals(other.getExemplarsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsCount() > 0) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsList().hashCode();
      }
      hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTimeUnixNano());
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCount());
      hash = (37 * hash) + SUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSum()));
      if (getBucketCountsCount() > 0) {
        hash = (37 * hash) + BUCKET_COUNTS_FIELD_NUMBER;
        hash = (53 * hash) + getBucketCountsList().hashCode();
      }
      if (getExplicitBoundsCount() > 0) {
        hash = (37 * hash) + EXPLICIT_BOUNDS_FIELD_NUMBER;
        hash = (53 * hash) + getExplicitBoundsList().hashCode();
      }
      if (getExemplarsCount() > 0) {
        hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
        hash = (53 * hash) + getExemplarsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * HistogramDataPoint is a single data point in a timeseries that describes the
     * time-varying values of a Histogram of double values. A Histogram contains
     * summary statistics for a population of values, it may optionally contain the
     * distribution of those values across a set of buckets.
     * If the histogram contains the distribution of values, then both
     * "explicit_bounds" and "bucket counts" fields must be defined.
     * If the histogram does not contain the distribution of values, then both
     * "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
     * "sum" are known.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.HistogramDataPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.HistogramDataPoint)
        io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_HistogramDataPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_HistogramDataPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLabelsFieldBuilder();
          getExemplarsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          labelsBuilder_.clear();
        }
        startTimeUnixNano_ = 0L;

        timeUnixNano_ = 0L;

        count_ = 0L;

        sum_ = 0D;

        bucketCounts_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        explicitBounds_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_HistogramDataPoint_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint result = new io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint(this);
        int from_bitField0_ = bitField0_;
        if (labelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            labels_ = java.util.Collections.unmodifiableList(labels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.labels_ = labels_;
        } else {
          result.labels_ = labelsBuilder_.build();
        }
        result.startTimeUnixNano_ = startTimeUnixNano_;
        result.timeUnixNano_ = timeUnixNano_;
        result.count_ = count_;
        result.sum_ = sum_;
        if (((bitField0_ & 0x00000002) != 0)) {
          bucketCounts_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bucketCounts_ = bucketCounts_;
        if (((bitField0_ & 0x00000004) != 0)) {
          explicitBounds_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.explicitBounds_ = explicitBounds_;
        if (exemplarsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.exemplars_ = exemplars_;
        } else {
          result.exemplars_ = exemplarsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint.getDefaultInstance()) return this;
        if (labelsBuilder_ == null) {
          if (!other.labels_.isEmpty()) {
            if (labels_.isEmpty()) {
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLabelsIsMutable();
              labels_.addAll(other.labels_);
            }
            onChanged();
          }
        } else {
          if (!other.labels_.isEmpty()) {
            if (labelsBuilder_.isEmpty()) {
              labelsBuilder_.dispose();
              labelsBuilder_ = null;
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              labelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLabelsFieldBuilder() : null;
            } else {
              labelsBuilder_.addAllMessages(other.labels_);
            }
          }
        }
        if (other.getStartTimeUnixNano() != 0L) {
          setStartTimeUnixNano(other.getStartTimeUnixNano());
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (other.getCount() != 0L) {
          setCount(other.getCount());
        }
        if (other.getSum() != 0D) {
          setSum(other.getSum());
        }
        if (!other.bucketCounts_.isEmpty()) {
          if (bucketCounts_.isEmpty()) {
            bucketCounts_ = other.bucketCounts_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBucketCountsIsMutable();
            bucketCounts_.addAll(other.bucketCounts_);
          }
          onChanged();
        }
        if (!other.explicitBounds_.isEmpty()) {
          if (explicitBounds_.isEmpty()) {
            explicitBounds_ = other.explicitBounds_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureExplicitBoundsIsMutable();
            explicitBounds_.addAll(other.explicitBounds_);
          }
          onChanged();
        }
        if (exemplarsBuilder_ == null) {
          if (!other.exemplars_.isEmpty()) {
            if (exemplars_.isEmpty()) {
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureExemplarsIsMutable();
              exemplars_.addAll(other.exemplars_);
            }
            onChanged();
          }
        } else {
          if (!other.exemplars_.isEmpty()) {
            if (exemplarsBuilder_.isEmpty()) {
              exemplarsBuilder_.dispose();
              exemplarsBuilder_ = null;
              exemplars_ = other.exemplars_;
              bitField0_ = (bitField0_ & ~0x00000008);
              exemplarsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExemplarsFieldBuilder() : null;
            } else {
              exemplarsBuilder_.addAllMessages(other.exemplars_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_ =
        java.util.Collections.emptyList();
      private void ensureLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(labels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> labelsBuilder_;

      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
        if (labelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(labels_);
        } else {
          return labelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public int getLabelsCount() {
        if (labelsBuilder_ == null) {
          return labels_.size();
        } else {
          return labelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);
        } else {
          return labelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.set(index, value);
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(index, value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addAllLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, labels_);
          onChanged();
        } else {
          labelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder clearLabels() {
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          labelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder removeLabels(int index) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.remove(index);
          onChanged();
        } else {
          labelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
          int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);  } else {
          return labelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getLabelsOrBuilderList() {
        if (labelsBuilder_ != null) {
          return labelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(labels_);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder() {
        return getLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getLabelsBuilderList() {
        return getLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getLabelsFieldBuilder() {
        if (labelsBuilder_ == null) {
          labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  labels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          labels_ = null;
        }
        return labelsBuilder_;
      }

      private long startTimeUnixNano_ ;
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return The startTimeUnixNano.
       */
      @java.lang.Override
      public long getStartTimeUnixNano() {
        return startTimeUnixNano_;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @param value The startTimeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setStartTimeUnixNano(long value) {
        
        startTimeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartTimeUnixNano() {
        
        startTimeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long count_ ;
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative. This
       * value must be equal to the sum of the "count" fields in buckets if a
       * histogram is provided.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @return The count.
       */
      @java.lang.Override
      public long getCount() {
        return count_;
      }
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative. This
       * value must be equal to the sum of the "count" fields in buckets if a
       * histogram is provided.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(long value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative. This
       * value must be equal to the sum of the "count" fields in buckets if a
       * histogram is provided.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0L;
        onChanged();
        return this;
      }

      private double sum_ ;
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero. This value must be equal to the sum of the "sum" fields in
       * buckets if a histogram is provided.
       * </pre>
       *
       * <code>double sum = 5;</code>
       * @return The sum.
       */
      @java.lang.Override
      public double getSum() {
        return sum_;
      }
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero. This value must be equal to the sum of the "sum" fields in
       * buckets if a histogram is provided.
       * </pre>
       *
       * <code>double sum = 5;</code>
       * @param value The sum to set.
       * @return This builder for chaining.
       */
      public Builder setSum(double value) {
        
        sum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero. This value must be equal to the sum of the "sum" fields in
       * buckets if a histogram is provided.
       * </pre>
       *
       * <code>double sum = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSum() {
        
        sum_ = 0D;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bucketCounts_ = emptyLongList();
      private void ensureBucketCountsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          bucketCounts_ = mutableCopy(bucketCounts_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @return A list containing the bucketCounts.
       */
      public java.util.List<java.lang.Long>
          getBucketCountsList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(bucketCounts_) : bucketCounts_;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @return The count of bucketCounts.
       */
      public int getBucketCountsCount() {
        return bucketCounts_.size();
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param index The index of the element to return.
       * @return The bucketCounts at the given index.
       */
      public long getBucketCounts(int index) {
        return bucketCounts_.getLong(index);
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param index The index to set the value at.
       * @param value The bucketCounts to set.
       * @return This builder for chaining.
       */
      public Builder setBucketCounts(
          int index, long value) {
        ensureBucketCountsIsMutable();
        bucketCounts_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param value The bucketCounts to add.
       * @return This builder for chaining.
       */
      public Builder addBucketCounts(long value) {
        ensureBucketCountsIsMutable();
        bucketCounts_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @param values The bucketCounts to add.
       * @return This builder for chaining.
       */
      public Builder addAllBucketCounts(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBucketCountsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucketCounts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * bucket_counts is an optional field contains the count values of histogram
       * for each bucket.
       * The sum of the bucket_counts must equal the value in the count field.
       * The number of elements in bucket_counts array must be by one greater than
       * the number of elements in explicit_bounds array.
       * </pre>
       *
       * <code>repeated fixed64 bucket_counts = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBucketCounts() {
        bucketCounts_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList explicitBounds_ = emptyDoubleList();
      private void ensureExplicitBoundsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          explicitBounds_ = mutableCopy(explicitBounds_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @return A list containing the explicitBounds.
       */
      public java.util.List<java.lang.Double>
          getExplicitBoundsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(explicitBounds_) : explicitBounds_;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @return The count of explicitBounds.
       */
      public int getExplicitBoundsCount() {
        return explicitBounds_.size();
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param index The index of the element to return.
       * @return The explicitBounds at the given index.
       */
      public double getExplicitBounds(int index) {
        return explicitBounds_.getDouble(index);
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param index The index to set the value at.
       * @param value The explicitBounds to set.
       * @return This builder for chaining.
       */
      public Builder setExplicitBounds(
          int index, double value) {
        ensureExplicitBoundsIsMutable();
        explicitBounds_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param value The explicitBounds to add.
       * @return This builder for chaining.
       */
      public Builder addExplicitBounds(double value) {
        ensureExplicitBoundsIsMutable();
        explicitBounds_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @param values The explicitBounds to add.
       * @return This builder for chaining.
       */
      public Builder addAllExplicitBounds(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureExplicitBoundsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, explicitBounds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * explicit_bounds specifies buckets with explicitly defined bounds for values.
       * This defines size(explicit_bounds) + 1 (= N) buckets. The boundaries for
       * bucket at index i are:
       * (-infinity, explicit_bounds[i]] for i == 0
       * (explicit_bounds[i-1], explicit_bounds[i]] for 0 &lt; i &lt; N-1
       * (explicit_bounds[i], +infinity) for i == N-1
       * The values in the explicit_bounds array must be strictly increasing.
       * Histogram buckets are inclusive of their upper boundary, except the last
       * bucket where the boundary is at infinity. This format is intentionally
       * compatible with the OpenMetrics histogram definition.
       * </pre>
       *
       * <code>repeated double explicit_bounds = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearExplicitBounds() {
        explicitBounds_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> exemplars_ =
        java.util.Collections.emptyList();
      private void ensureExemplarsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          exemplars_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar>(exemplars_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> exemplarsBuilder_;

      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> getExemplarsList() {
        if (exemplarsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exemplars_);
        } else {
          return exemplarsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public int getExemplarsCount() {
        if (exemplarsBuilder_ == null) {
          return exemplars_.size();
        } else {
          return exemplarsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);
        } else {
          return exemplarsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.set(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder setExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.set(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder addExemplars(io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar value) {
        if (exemplarsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExemplarsIsMutable();
          exemplars_.add(index, value);
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder addExemplars(
          io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder addExemplars(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder builderForValue) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.add(index, builderForValue.build());
          onChanged();
        } else {
          exemplarsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder addAllExemplars(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar> values) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exemplars_);
          onChanged();
        } else {
          exemplarsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder clearExemplars() {
        if (exemplarsBuilder_ == null) {
          exemplars_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          exemplarsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public Builder removeExemplars(int index) {
        if (exemplarsBuilder_ == null) {
          ensureExemplarsIsMutable();
          exemplars_.remove(index);
          onChanged();
        } else {
          exemplarsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder getExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder getExemplarsOrBuilder(
          int index) {
        if (exemplarsBuilder_ == null) {
          return exemplars_.get(index);  } else {
          return exemplarsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
           getExemplarsOrBuilderList() {
        if (exemplarsBuilder_ != null) {
          return exemplarsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exemplars_);
        }
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder addExemplarsBuilder() {
        return getExemplarsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder addExemplarsBuilder(
          int index) {
        return getExemplarsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) List of exemplars collected from
       * measurements that were used to form the data point
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.Exemplar exemplars = 8;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder> 
           getExemplarsBuilderList() {
        return getExemplarsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder> 
          getExemplarsFieldBuilder() {
        if (exemplarsBuilder_ == null) {
          exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder>(
                  exemplars_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          exemplars_ = null;
        }
        return exemplarsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.HistogramDataPoint)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.HistogramDataPoint)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HistogramDataPoint>
        PARSER = new com.google.protobuf.AbstractParser<HistogramDataPoint>() {
      @java.lang.Override
      public HistogramDataPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HistogramDataPoint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HistogramDataPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HistogramDataPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.HistogramDataPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SummaryDataPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.SummaryDataPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getLabelsList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index);
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    long getStartTimeUnixNano();

    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    long getCount();

    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @return The sum.
     */
    double getSum();

    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile> 
        getQuantileValuesList();
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile getQuantileValues(int index);
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    int getQuantileValuesCount();
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder> 
        getQuantileValuesOrBuilderList();
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder getQuantileValuesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * SummaryDataPoint is a single data point in a timeseries that describes the
   * time-varying values of a Summary metric.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.SummaryDataPoint}
   */
  public static final class SummaryDataPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.SummaryDataPoint)
      SummaryDataPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SummaryDataPoint.newBuilder() to construct.
    private SummaryDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SummaryDataPoint() {
      labels_ = java.util.Collections.emptyList();
      quantileValues_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SummaryDataPoint();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SummaryDataPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              labels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              startTimeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 33: {

              count_ = input.readFixed64();
              break;
            }
            case 41: {

              sum_ = input.readDouble();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                quantileValues_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile>();
                mutable_bitField0_ |= 0x00000002;
              }
              quantileValues_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          labels_ = java.util.Collections.unmodifiableList(labels_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          quantileValues_ = java.util.Collections.unmodifiableList(quantileValues_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder.class);
    }

    public interface ValueAtQuantileOrBuilder extends
        // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The quantile of a distribution. Must be in the interval
       * [0.0, 1.0].
       * </pre>
       *
       * <code>double quantile = 1;</code>
       * @return The quantile.
       */
      double getQuantile();

      /**
       * <pre>
       * The value at the given quantile of a distribution.
       * </pre>
       *
       * <code>double value = 2;</code>
       * @return The value.
       */
      double getValue();
    }
    /**
     * <pre>
     * Represents the value at a given quantile of a distribution.
     * To record Min and Max values following conventions are used:
     * - The 1.0 quantile is equivalent to the maximum value observed.
     * - The 0.0 quantile is equivalent to the minimum value observed.
     * See the following issue for more context:
     * https://github.com/open-telemetry/opentelemetry-proto/issues/125
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile}
     */
    public static final class ValueAtQuantile extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile)
        ValueAtQuantileOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ValueAtQuantile.newBuilder() to construct.
      private ValueAtQuantile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ValueAtQuantile() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ValueAtQuantile();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ValueAtQuantile(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {

                quantile_ = input.readDouble();
                break;
              }
              case 17: {

                value_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.class, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder.class);
      }

      public static final int QUANTILE_FIELD_NUMBER = 1;
      private double quantile_;
      /**
       * <pre>
       * The quantile of a distribution. Must be in the interval
       * [0.0, 1.0].
       * </pre>
       *
       * <code>double quantile = 1;</code>
       * @return The quantile.
       */
      @java.lang.Override
      public double getQuantile() {
        return quantile_;
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private double value_;
      /**
       * <pre>
       * The value at the given quantile of a distribution.
       * </pre>
       *
       * <code>double value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public double getValue() {
        return value_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (java.lang.Double.doubleToRawLongBits(quantile_) != 0) {
          output.writeDouble(1, quantile_);
        }
        if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
          output.writeDouble(2, value_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (java.lang.Double.doubleToRawLongBits(quantile_) != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, quantile_);
        }
        if (java.lang.Double.doubleToRawLongBits(value_) != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, value_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile)) {
          return super.equals(obj);
        }
        io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile other = (io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile) obj;

        if (java.lang.Double.doubleToLongBits(getQuantile())
            != java.lang.Double.doubleToLongBits(
                other.getQuantile())) return false;
        if (java.lang.Double.doubleToLongBits(getValue())
            != java.lang.Double.doubleToLongBits(
                other.getValue())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + QUANTILE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getQuantile()));
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getValue()));
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Represents the value at a given quantile of a distribution.
       * To record Min and Max values following conventions are used:
       * - The 1.0 quantile is equivalent to the maximum value observed.
       * - The 0.0 quantile is equivalent to the minimum value observed.
       * See the following issue for more context:
       * https://github.com/open-telemetry/opentelemetry-proto/issues/125
       * </pre>
       *
       * Protobuf type {@code jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile)
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.class, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder.class);
        }

        // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          quantile_ = 0D;

          value_ = 0D;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_descriptor;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile getDefaultInstanceForType() {
          return io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.getDefaultInstance();
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile build() {
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile buildPartial() {
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile result = new io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile(this);
          result.quantile_ = quantile_;
          result.value_ = value_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile) {
            return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile other) {
          if (other == io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.getDefaultInstance()) return this;
          if (other.getQuantile() != 0D) {
            setQuantile(other.getQuantile());
          }
          if (other.getValue() != 0D) {
            setValue(other.getValue());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private double quantile_ ;
        /**
         * <pre>
         * The quantile of a distribution. Must be in the interval
         * [0.0, 1.0].
         * </pre>
         *
         * <code>double quantile = 1;</code>
         * @return The quantile.
         */
        @java.lang.Override
        public double getQuantile() {
          return quantile_;
        }
        /**
         * <pre>
         * The quantile of a distribution. Must be in the interval
         * [0.0, 1.0].
         * </pre>
         *
         * <code>double quantile = 1;</code>
         * @param value The quantile to set.
         * @return This builder for chaining.
         */
        public Builder setQuantile(double value) {
          
          quantile_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The quantile of a distribution. Must be in the interval
         * [0.0, 1.0].
         * </pre>
         *
         * <code>double quantile = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearQuantile() {
          
          quantile_ = 0D;
          onChanged();
          return this;
        }

        private double value_ ;
        /**
         * <pre>
         * The value at the given quantile of a distribution.
         * </pre>
         *
         * <code>double value = 2;</code>
         * @return The value.
         */
        @java.lang.Override
        public double getValue() {
          return value_;
        }
        /**
         * <pre>
         * The value at the given quantile of a distribution.
         * </pre>
         *
         * <code>double value = 2;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(double value) {
          
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The value at the given quantile of a distribution.
         * </pre>
         *
         * <code>double value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          
          value_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile)
      }

      // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile)
      private static final io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile();
      }

      public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ValueAtQuantile>
          PARSER = new com.google.protobuf.AbstractParser<ValueAtQuantile>() {
        @java.lang.Override
        public ValueAtQuantile parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ValueAtQuantile(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ValueAtQuantile> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ValueAtQuantile> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_;
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getLabelsOrBuilderList() {
      return labels_;
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public int getLabelsCount() {
      return labels_.size();
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
      return labels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that uniquely identify this timeseries.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
        int index) {
      return labels_.get(index);
    }

    public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long startTimeUnixNano_;
    /**
     * <pre>
     * start_time_unix_nano is the last time when the aggregation value was reset
     * to "zero". For some metric types this is ignored, see data types for more
     * details.
     * The aggregation value is over the time interval (start_time_unix_nano,
     * time_unix_nano].
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * Value of 0 indicates that the timestamp is unspecified. In that case the
     * timestamp may be decided by the backend.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @java.lang.Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the moment when this aggregation value was reported.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int COUNT_FIELD_NUMBER = 4;
    private long count_;
    /**
     * <pre>
     * count is the number of values in the population. Must be non-negative.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    @java.lang.Override
    public long getCount() {
      return count_;
    }

    public static final int SUM_FIELD_NUMBER = 5;
    private double sum_;
    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @return The sum.
     */
    @java.lang.Override
    public double getSum() {
      return sum_;
    }

    public static final int QUANTILE_VALUES_FIELD_NUMBER = 6;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile> quantileValues_;
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile> getQuantileValuesList() {
      return quantileValues_;
    }
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder> 
        getQuantileValuesOrBuilderList() {
      return quantileValues_;
    }
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    @java.lang.Override
    public int getQuantileValuesCount() {
      return quantileValues_.size();
    }
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile getQuantileValues(int index) {
      return quantileValues_.get(index);
    }
    /**
     * <pre>
     * (Optional) list of values at different quantiles of the distribution calculated
     * from the current snapshot. The quantiles must be strictly increasing.
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder getQuantileValuesOrBuilder(
        int index) {
      return quantileValues_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < labels_.size(); i++) {
        output.writeMessage(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        output.writeFixed64(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(3, timeUnixNano_);
      }
      if (count_ != 0L) {
        output.writeFixed64(4, count_);
      }
      if (java.lang.Double.doubleToRawLongBits(sum_) != 0) {
        output.writeDouble(5, sum_);
      }
      for (int i = 0; i < quantileValues_.size(); i++) {
        output.writeMessage(6, quantileValues_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < labels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, labels_.get(i));
      }
      if (startTimeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, startTimeUnixNano_);
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, timeUnixNano_);
      }
      if (count_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, count_);
      }
      if (java.lang.Double.doubleToRawLongBits(sum_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, sum_);
      }
      for (int i = 0; i < quantileValues_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, quantileValues_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint other = (io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint) obj;

      if (!getLabelsList()
          .equals(other.getLabelsList())) return false;
      if (getStartTimeUnixNano()
          != other.getStartTimeUnixNano()) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (getCount()
          != other.getCount()) return false;
      if (java.lang.Double.doubleToLongBits(getSum())
          != java.lang.Double.doubleToLongBits(
              other.getSum())) return false;
      if (!getQuantileValuesList()
          .equals(other.getQuantileValuesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLabelsCount() > 0) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelsList().hashCode();
      }
      hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTimeUnixNano());
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCount());
      hash = (37 * hash) + SUM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSum()));
      if (getQuantileValuesCount() > 0) {
        hash = (37 * hash) + QUANTILE_VALUES_FIELD_NUMBER;
        hash = (53 * hash) + getQuantileValuesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SummaryDataPoint is a single data point in a timeseries that describes the
     * time-varying values of a Summary metric.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.SummaryDataPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.SummaryDataPoint)
        io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.class, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLabelsFieldBuilder();
          getQuantileValuesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          labelsBuilder_.clear();
        }
        startTimeUnixNano_ = 0L;

        timeUnixNano_ = 0L;

        count_ = 0L;

        sum_ = 0D;

        if (quantileValuesBuilder_ == null) {
          quantileValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          quantileValuesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint result = new io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint(this);
        int from_bitField0_ = bitField0_;
        if (labelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            labels_ = java.util.Collections.unmodifiableList(labels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.labels_ = labels_;
        } else {
          result.labels_ = labelsBuilder_.build();
        }
        result.startTimeUnixNano_ = startTimeUnixNano_;
        result.timeUnixNano_ = timeUnixNano_;
        result.count_ = count_;
        result.sum_ = sum_;
        if (quantileValuesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            quantileValues_ = java.util.Collections.unmodifiableList(quantileValues_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.quantileValues_ = quantileValues_;
        } else {
          result.quantileValues_ = quantileValuesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.getDefaultInstance()) return this;
        if (labelsBuilder_ == null) {
          if (!other.labels_.isEmpty()) {
            if (labels_.isEmpty()) {
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLabelsIsMutable();
              labels_.addAll(other.labels_);
            }
            onChanged();
          }
        } else {
          if (!other.labels_.isEmpty()) {
            if (labelsBuilder_.isEmpty()) {
              labelsBuilder_.dispose();
              labelsBuilder_ = null;
              labels_ = other.labels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              labelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLabelsFieldBuilder() : null;
            } else {
              labelsBuilder_.addAllMessages(other.labels_);
            }
          }
        }
        if (other.getStartTimeUnixNano() != 0L) {
          setStartTimeUnixNano(other.getStartTimeUnixNano());
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (other.getCount() != 0L) {
          setCount(other.getCount());
        }
        if (other.getSum() != 0D) {
          setSum(other.getSum());
        }
        if (quantileValuesBuilder_ == null) {
          if (!other.quantileValues_.isEmpty()) {
            if (quantileValues_.isEmpty()) {
              quantileValues_ = other.quantileValues_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureQuantileValuesIsMutable();
              quantileValues_.addAll(other.quantileValues_);
            }
            onChanged();
          }
        } else {
          if (!other.quantileValues_.isEmpty()) {
            if (quantileValuesBuilder_.isEmpty()) {
              quantileValuesBuilder_.dispose();
              quantileValuesBuilder_ = null;
              quantileValues_ = other.quantileValues_;
              bitField0_ = (bitField0_ & ~0x00000002);
              quantileValuesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getQuantileValuesFieldBuilder() : null;
            } else {
              quantileValuesBuilder_.addAllMessages(other.quantileValues_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> labels_ =
        java.util.Collections.emptyList();
      private void ensureLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          labels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(labels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> labelsBuilder_;

      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getLabelsList() {
        if (labelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(labels_);
        } else {
          return labelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public int getLabelsCount() {
        if (labelsBuilder_ == null) {
          return labels_.size();
        } else {
          return labelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getLabels(int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);
        } else {
          return labelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.set(index, value);
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder setLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (labelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelsIsMutable();
          labels_.add(index, value);
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder addAllLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, labels_);
          onChanged();
        } else {
          labelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder clearLabels() {
        if (labelsBuilder_ == null) {
          labels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          labelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public Builder removeLabels(int index) {
        if (labelsBuilder_ == null) {
          ensureLabelsIsMutable();
          labels_.remove(index);
          onChanged();
        } else {
          labelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getLabelsOrBuilder(
          int index) {
        if (labelsBuilder_ == null) {
          return labels_.get(index);  } else {
          return labelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getLabelsOrBuilderList() {
        if (labelsBuilder_ != null) {
          return labelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(labels_);
        }
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder() {
        return getLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addLabelsBuilder(
          int index) {
        return getLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that uniquely identify this timeseries.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getLabelsBuilderList() {
        return getLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getLabelsFieldBuilder() {
        if (labelsBuilder_ == null) {
          labelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  labels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          labels_ = null;
        }
        return labelsBuilder_;
      }

      private long startTimeUnixNano_ ;
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return The startTimeUnixNano.
       */
      @java.lang.Override
      public long getStartTimeUnixNano() {
        return startTimeUnixNano_;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @param value The startTimeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setStartTimeUnixNano(long value) {
        
        startTimeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_time_unix_nano is the last time when the aggregation value was reset
       * to "zero". For some metric types this is ignored, see data types for more
       * details.
       * The aggregation value is over the time interval (start_time_unix_nano,
       * time_unix_nano].
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * Value of 0 indicates that the timestamp is unspecified. In that case the
       * timestamp may be decided by the backend.
       * </pre>
       *
       * <code>fixed64 start_time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartTimeUnixNano() {
        
        startTimeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the moment when this aggregation value was reported.
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long count_ ;
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @return The count.
       */
      @java.lang.Override
      public long getCount() {
        return count_;
      }
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(long value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * count is the number of values in the population. Must be non-negative.
       * </pre>
       *
       * <code>fixed64 count = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0L;
        onChanged();
        return this;
      }

      private double sum_ ;
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero.
       * </pre>
       *
       * <code>double sum = 5;</code>
       * @return The sum.
       */
      @java.lang.Override
      public double getSum() {
        return sum_;
      }
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero.
       * </pre>
       *
       * <code>double sum = 5;</code>
       * @param value The sum to set.
       * @return This builder for chaining.
       */
      public Builder setSum(double value) {
        
        sum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sum of the values in the population. If count is zero then this field
       * must be zero.
       * </pre>
       *
       * <code>double sum = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSum() {
        
        sum_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile> quantileValues_ =
        java.util.Collections.emptyList();
      private void ensureQuantileValuesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          quantileValues_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile>(quantileValues_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder> quantileValuesBuilder_;

      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile> getQuantileValuesList() {
        if (quantileValuesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(quantileValues_);
        } else {
          return quantileValuesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public int getQuantileValuesCount() {
        if (quantileValuesBuilder_ == null) {
          return quantileValues_.size();
        } else {
          return quantileValuesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile getQuantileValues(int index) {
        if (quantileValuesBuilder_ == null) {
          return quantileValues_.get(index);
        } else {
          return quantileValuesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder setQuantileValues(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile value) {
        if (quantileValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuantileValuesIsMutable();
          quantileValues_.set(index, value);
          onChanged();
        } else {
          quantileValuesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder setQuantileValues(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder builderForValue) {
        if (quantileValuesBuilder_ == null) {
          ensureQuantileValuesIsMutable();
          quantileValues_.set(index, builderForValue.build());
          onChanged();
        } else {
          quantileValuesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder addQuantileValues(io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile value) {
        if (quantileValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuantileValuesIsMutable();
          quantileValues_.add(value);
          onChanged();
        } else {
          quantileValuesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder addQuantileValues(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile value) {
        if (quantileValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQuantileValuesIsMutable();
          quantileValues_.add(index, value);
          onChanged();
        } else {
          quantileValuesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder addQuantileValues(
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder builderForValue) {
        if (quantileValuesBuilder_ == null) {
          ensureQuantileValuesIsMutable();
          quantileValues_.add(builderForValue.build());
          onChanged();
        } else {
          quantileValuesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder addQuantileValues(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder builderForValue) {
        if (quantileValuesBuilder_ == null) {
          ensureQuantileValuesIsMutable();
          quantileValues_.add(index, builderForValue.build());
          onChanged();
        } else {
          quantileValuesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder addAllQuantileValues(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile> values) {
        if (quantileValuesBuilder_ == null) {
          ensureQuantileValuesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, quantileValues_);
          onChanged();
        } else {
          quantileValuesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder clearQuantileValues() {
        if (quantileValuesBuilder_ == null) {
          quantileValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          quantileValuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public Builder removeQuantileValues(int index) {
        if (quantileValuesBuilder_ == null) {
          ensureQuantileValuesIsMutable();
          quantileValues_.remove(index);
          onChanged();
        } else {
          quantileValuesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder getQuantileValuesBuilder(
          int index) {
        return getQuantileValuesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder getQuantileValuesOrBuilder(
          int index) {
        if (quantileValuesBuilder_ == null) {
          return quantileValues_.get(index);  } else {
          return quantileValuesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder> 
           getQuantileValuesOrBuilderList() {
        if (quantileValuesBuilder_ != null) {
          return quantileValuesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(quantileValues_);
        }
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder addQuantileValuesBuilder() {
        return getQuantileValuesFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder addQuantileValuesBuilder(
          int index) {
        return getQuantileValuesFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.getDefaultInstance());
      }
      /**
       * <pre>
       * (Optional) list of values at different quantiles of the distribution calculated
       * from the current snapshot. The quantiles must be strictly increasing.
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.SummaryDataPoint.ValueAtQuantile quantile_values = 6;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder> 
           getQuantileValuesBuilderList() {
        return getQuantileValuesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder> 
          getQuantileValuesFieldBuilder() {
        if (quantileValuesBuilder_ == null) {
          quantileValuesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantile.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint.ValueAtQuantileOrBuilder>(
                  quantileValues_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          quantileValues_ = null;
        }
        return quantileValuesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.SummaryDataPoint)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.SummaryDataPoint)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SummaryDataPoint>
        PARSER = new com.google.protobuf.AbstractParser<SummaryDataPoint>() {
      @java.lang.Override
      public SummaryDataPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SummaryDataPoint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SummaryDataPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SummaryDataPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.SummaryDataPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  @java.lang.Deprecated public interface IntExemplarOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.IntExemplar)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getFilteredLabelsList();
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getFilteredLabels(int index);
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    int getFilteredLabelsCount();
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getFilteredLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <pre>
     * Numerical int value of the measurement that was recorded.
     * </pre>
     *
     * <code>sfixed64 value = 3;</code>
     * @return The value.
     */
    long getValue();

    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @return The spanId.
     */
    com.google.protobuf.ByteString getSpanId();

    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @return The traceId.
     */
    com.google.protobuf.ByteString getTraceId();
  }
  /**
   * <pre>
   * A representation of an exemplar, which is a sample input int measurement.
   * Exemplars also hold information about the environment when the measurement
   * was recorded, for example the span and trace ID of the active span when the
   * exemplar was recorded.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.IntExemplar}
   */
  @java.lang.Deprecated public static final class IntExemplar extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.IntExemplar)
      IntExemplarOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IntExemplar.newBuilder() to construct.
    private IntExemplar(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IntExemplar() {
      filteredLabels_ = java.util.Collections.emptyList();
      spanId_ = com.google.protobuf.ByteString.EMPTY;
      traceId_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IntExemplar();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IntExemplar(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                filteredLabels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              filteredLabels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {

              value_ = input.readSFixed64();
              break;
            }
            case 34: {

              spanId_ = input.readBytes();
              break;
            }
            case 42: {

              traceId_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          filteredLabels_ = java.util.Collections.unmodifiableList(filteredLabels_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntExemplar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntExemplar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder.class);
    }

    public static final int FILTERED_LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> filteredLabels_;
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getFilteredLabelsList() {
      return filteredLabels_;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getFilteredLabelsOrBuilderList() {
      return filteredLabels_;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public int getFilteredLabelsCount() {
      return filteredLabels_.size();
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getFilteredLabels(int index) {
      return filteredLabels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
        int index) {
      return filteredLabels_.get(index);
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private long value_;
    /**
     * <pre>
     * Numerical int value of the measurement that was recorded.
     * </pre>
     *
     * <code>sfixed64 value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public long getValue() {
      return value_;
    }

    public static final int SPAN_ID_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString spanId_;
    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @return The spanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSpanId() {
      return spanId_;
    }

    public static final int TRACE_ID_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString traceId_;
    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < filteredLabels_.size(); i++) {
        output.writeMessage(1, filteredLabels_.get(i));
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(2, timeUnixNano_);
      }
      if (value_ != 0L) {
        output.writeSFixed64(3, value_);
      }
      if (!spanId_.isEmpty()) {
        output.writeBytes(4, spanId_);
      }
      if (!traceId_.isEmpty()) {
        output.writeBytes(5, traceId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filteredLabels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filteredLabels_.get(i));
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, timeUnixNano_);
      }
      if (value_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(3, value_);
      }
      if (!spanId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, spanId_);
      }
      if (!traceId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, traceId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar other = (io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar) obj;

      if (!getFilteredLabelsList()
          .equals(other.getFilteredLabelsList())) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (getValue()
          != other.getValue()) return false;
      if (!getSpanId()
          .equals(other.getSpanId())) return false;
      if (!getTraceId()
          .equals(other.getTraceId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFilteredLabelsCount() > 0) {
        hash = (37 * hash) + FILTERED_LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getFilteredLabelsList().hashCode();
      }
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getValue());
      hash = (37 * hash) + SPAN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSpanId().hashCode();
      hash = (37 * hash) + TRACE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTraceId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of an exemplar, which is a sample input int measurement.
     * Exemplars also hold information about the environment when the measurement
     * was recorded, for example the span and trace ID of the active span when the
     * exemplar was recorded.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.IntExemplar}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.IntExemplar)
        io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplarOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntExemplar_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntExemplar_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.class, io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFilteredLabelsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filteredLabelsBuilder_ == null) {
          filteredLabels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filteredLabelsBuilder_.clear();
        }
        timeUnixNano_ = 0L;

        value_ = 0L;

        spanId_ = com.google.protobuf.ByteString.EMPTY;

        traceId_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_IntExemplar_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar result = new io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar(this);
        int from_bitField0_ = bitField0_;
        if (filteredLabelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filteredLabels_ = java.util.Collections.unmodifiableList(filteredLabels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filteredLabels_ = filteredLabels_;
        } else {
          result.filteredLabels_ = filteredLabelsBuilder_.build();
        }
        result.timeUnixNano_ = timeUnixNano_;
        result.value_ = value_;
        result.spanId_ = spanId_;
        result.traceId_ = traceId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar.getDefaultInstance()) return this;
        if (filteredLabelsBuilder_ == null) {
          if (!other.filteredLabels_.isEmpty()) {
            if (filteredLabels_.isEmpty()) {
              filteredLabels_ = other.filteredLabels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFilteredLabelsIsMutable();
              filteredLabels_.addAll(other.filteredLabels_);
            }
            onChanged();
          }
        } else {
          if (!other.filteredLabels_.isEmpty()) {
            if (filteredLabelsBuilder_.isEmpty()) {
              filteredLabelsBuilder_.dispose();
              filteredLabelsBuilder_ = null;
              filteredLabels_ = other.filteredLabels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filteredLabelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFilteredLabelsFieldBuilder() : null;
            } else {
              filteredLabelsBuilder_.addAllMessages(other.filteredLabels_);
            }
          }
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (other.getValue() != 0L) {
          setValue(other.getValue());
        }
        if (other.getSpanId() != com.google.protobuf.ByteString.EMPTY) {
          setSpanId(other.getSpanId());
        }
        if (other.getTraceId() != com.google.protobuf.ByteString.EMPTY) {
          setTraceId(other.getTraceId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> filteredLabels_ =
        java.util.Collections.emptyList();
      private void ensureFilteredLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filteredLabels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(filteredLabels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> filteredLabelsBuilder_;

      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getFilteredLabelsList() {
        if (filteredLabelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filteredLabels_);
        } else {
          return filteredLabelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public int getFilteredLabelsCount() {
        if (filteredLabelsBuilder_ == null) {
          return filteredLabels_.size();
        } else {
          return filteredLabelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getFilteredLabels(int index) {
        if (filteredLabelsBuilder_ == null) {
          return filteredLabels_.get(index);
        } else {
          return filteredLabelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder setFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (filteredLabelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilteredLabelsIsMutable();
          filteredLabels_.set(index, value);
          onChanged();
        } else {
          filteredLabelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder setFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.set(index, builderForValue.build());
          onChanged();
        } else {
          filteredLabelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (filteredLabelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(value);
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (filteredLabelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(index, value);
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(builderForValue.build());
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(index, builderForValue.build());
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addAllFilteredLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filteredLabels_);
          onChanged();
        } else {
          filteredLabelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder clearFilteredLabels() {
        if (filteredLabelsBuilder_ == null) {
          filteredLabels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filteredLabelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder removeFilteredLabels(int index) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.remove(index);
          onChanged();
        } else {
          filteredLabelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getFilteredLabelsBuilder(
          int index) {
        return getFilteredLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
          int index) {
        if (filteredLabelsBuilder_ == null) {
          return filteredLabels_.get(index);  } else {
          return filteredLabelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getFilteredLabelsOrBuilderList() {
        if (filteredLabelsBuilder_ != null) {
          return filteredLabelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filteredLabels_);
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addFilteredLabelsBuilder() {
        return getFilteredLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addFilteredLabelsBuilder(
          int index) {
        return getFilteredLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getFilteredLabelsBuilderList() {
        return getFilteredLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getFilteredLabelsFieldBuilder() {
        if (filteredLabelsBuilder_ == null) {
          filteredLabelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  filteredLabels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          filteredLabels_ = null;
        }
        return filteredLabelsBuilder_;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the exact time when this exemplar was recorded
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 2;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the exact time when this exemplar was recorded
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 2;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the exact time when this exemplar was recorded
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      private long value_ ;
      /**
       * <pre>
       * Numerical int value of the measurement that was recorded.
       * </pre>
       *
       * <code>sfixed64 value = 3;</code>
       * @return The value.
       */
      @java.lang.Override
      public long getValue() {
        return value_;
      }
      /**
       * <pre>
       * Numerical int value of the measurement that was recorded.
       * </pre>
       *
       * <code>sfixed64 value = 3;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(long value) {
        
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Numerical int value of the measurement that was recorded.
       * </pre>
       *
       * <code>sfixed64 value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        
        value_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString spanId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Optional) Span ID of the exemplar trace.
       * span_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes span_id = 4;</code>
       * @return The spanId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSpanId() {
        return spanId_;
      }
      /**
       * <pre>
       * (Optional) Span ID of the exemplar trace.
       * span_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes span_id = 4;</code>
       * @param value The spanId to set.
       * @return This builder for chaining.
       */
      public Builder setSpanId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        spanId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Span ID of the exemplar trace.
       * span_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes span_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpanId() {
        
        spanId_ = getDefaultInstance().getSpanId();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString traceId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Optional) Trace ID of the exemplar trace.
       * trace_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes trace_id = 5;</code>
       * @return The traceId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTraceId() {
        return traceId_;
      }
      /**
       * <pre>
       * (Optional) Trace ID of the exemplar trace.
       * trace_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes trace_id = 5;</code>
       * @param value The traceId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        traceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Trace ID of the exemplar trace.
       * trace_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes trace_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceId() {
        
        traceId_ = getDefaultInstance().getTraceId();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.IntExemplar)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.IntExemplar)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IntExemplar>
        PARSER = new com.google.protobuf.AbstractParser<IntExemplar>() {
      @java.lang.Override
      public IntExemplar parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IntExemplar(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IntExemplar> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IntExemplar> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.IntExemplar getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExemplarOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jaeger.api_v2.metrics.Exemplar)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> 
        getFilteredLabelsList();
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getFilteredLabels(int index);
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    int getFilteredLabelsCount();
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getFilteredLabelsOrBuilderList();
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
        int index);

    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @return The timeUnixNano.
     */
    long getTimeUnixNano();

    /**
     * <code>double as_double = 3;</code>
     * @return Whether the asDouble field is set.
     */
    boolean hasAsDouble();
    /**
     * <code>double as_double = 3;</code>
     * @return The asDouble.
     */
    double getAsDouble();

    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return Whether the asInt field is set.
     */
    boolean hasAsInt();
    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return The asInt.
     */
    long getAsInt();

    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @return The spanId.
     */
    com.google.protobuf.ByteString getSpanId();

    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @return The traceId.
     */
    com.google.protobuf.ByteString getTraceId();

    public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.ValueCase getValueCase();
  }
  /**
   * <pre>
   * A representation of an exemplar, which is a sample input measurement.
   * Exemplars also hold information about the environment when the measurement
   * was recorded, for example the span and trace ID of the active span when the
   * exemplar was recorded.
   * </pre>
   *
   * Protobuf type {@code jaeger.api_v2.metrics.Exemplar}
   */
  public static final class Exemplar extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jaeger.api_v2.metrics.Exemplar)
      ExemplarOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Exemplar.newBuilder() to construct.
    private Exemplar(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exemplar() {
      filteredLabels_ = java.util.Collections.emptyList();
      spanId_ = com.google.protobuf.ByteString.EMPTY;
      traceId_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Exemplar();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Exemplar(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                filteredLabels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>();
                mutable_bitField0_ |= 0x00000001;
              }
              filteredLabels_.add(
                  input.readMessage(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.parser(), extensionRegistry));
              break;
            }
            case 17: {

              timeUnixNano_ = input.readFixed64();
              break;
            }
            case 25: {
              value_ = input.readDouble();
              valueCase_ = 3;
              break;
            }
            case 34: {

              spanId_ = input.readBytes();
              break;
            }
            case 42: {

              traceId_ = input.readBytes();
              break;
            }
            case 49: {
              value_ = input.readSFixed64();
              valueCase_ = 6;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          filteredLabels_ = java.util.Collections.unmodifiableList(filteredLabels_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Exemplar_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Exemplar_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.class, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder.class);
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      AS_DOUBLE(3),
      AS_INT(6),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 3: return AS_DOUBLE;
          case 6: return AS_INT;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public static final int FILTERED_LABELS_FIELD_NUMBER = 1;
    private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> filteredLabels_;
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getFilteredLabelsList() {
      return filteredLabels_;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
        getFilteredLabelsOrBuilderList() {
      return filteredLabels_;
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public int getFilteredLabelsCount() {
      return filteredLabels_.size();
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getFilteredLabels(int index) {
      return filteredLabels_.get(index);
    }
    /**
     * <pre>
     * The set of labels that were filtered out by the aggregator, but recorded
     * alongside the original measurement. Only labels that were filtered out
     * by the aggregator should be included
     * </pre>
     *
     * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
     */
    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
        int index) {
      return filteredLabels_.get(index);
    }

    public static final int TIME_UNIX_NANO_FIELD_NUMBER = 2;
    private long timeUnixNano_;
    /**
     * <pre>
     * time_unix_nano is the exact time when this exemplar was recorded
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 2;</code>
     * @return The timeUnixNano.
     */
    @java.lang.Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }

    public static final int AS_DOUBLE_FIELD_NUMBER = 3;
    /**
     * <code>double as_double = 3;</code>
     * @return Whether the asDouble field is set.
     */
    @java.lang.Override
    public boolean hasAsDouble() {
      return valueCase_ == 3;
    }
    /**
     * <code>double as_double = 3;</code>
     * @return The asDouble.
     */
    @java.lang.Override
    public double getAsDouble() {
      if (valueCase_ == 3) {
        return (java.lang.Double) value_;
      }
      return 0D;
    }

    public static final int AS_INT_FIELD_NUMBER = 6;
    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return Whether the asInt field is set.
     */
    @java.lang.Override
    public boolean hasAsInt() {
      return valueCase_ == 6;
    }
    /**
     * <code>sfixed64 as_int = 6;</code>
     * @return The asInt.
     */
    @java.lang.Override
    public long getAsInt() {
      if (valueCase_ == 6) {
        return (java.lang.Long) value_;
      }
      return 0L;
    }

    public static final int SPAN_ID_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString spanId_;
    /**
     * <pre>
     * (Optional) Span ID of the exemplar trace.
     * span_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes span_id = 4;</code>
     * @return The spanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSpanId() {
      return spanId_;
    }

    public static final int TRACE_ID_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString traceId_;
    /**
     * <pre>
     * (Optional) Trace ID of the exemplar trace.
     * trace_id may be missing if the measurement is not recorded inside a trace
     * or if the trace is not sampled.
     * </pre>
     *
     * <code>bytes trace_id = 5;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < filteredLabels_.size(); i++) {
        output.writeMessage(1, filteredLabels_.get(i));
      }
      if (timeUnixNano_ != 0L) {
        output.writeFixed64(2, timeUnixNano_);
      }
      if (valueCase_ == 3) {
        output.writeDouble(
            3, (double)((java.lang.Double) value_));
      }
      if (!spanId_.isEmpty()) {
        output.writeBytes(4, spanId_);
      }
      if (!traceId_.isEmpty()) {
        output.writeBytes(5, traceId_);
      }
      if (valueCase_ == 6) {
        output.writeSFixed64(
            6, (long)((java.lang.Long) value_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filteredLabels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filteredLabels_.get(i));
      }
      if (timeUnixNano_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, timeUnixNano_);
      }
      if (valueCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              3, (double)((java.lang.Double) value_));
      }
      if (!spanId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, spanId_);
      }
      if (!traceId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, traceId_);
      }
      if (valueCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed64Size(
              6, (long)((java.lang.Long) value_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar)) {
        return super.equals(obj);
      }
      io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar other = (io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar) obj;

      if (!getFilteredLabelsList()
          .equals(other.getFilteredLabelsList())) return false;
      if (getTimeUnixNano()
          != other.getTimeUnixNano()) return false;
      if (!getSpanId()
          .equals(other.getSpanId())) return false;
      if (!getTraceId()
          .equals(other.getTraceId())) return false;
      if (!getValueCase().equals(other.getValueCase())) return false;
      switch (valueCase_) {
        case 3:
          if (java.lang.Double.doubleToLongBits(getAsDouble())
              != java.lang.Double.doubleToLongBits(
                  other.getAsDouble())) return false;
          break;
        case 6:
          if (getAsInt()
              != other.getAsInt()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFilteredLabelsCount() > 0) {
        hash = (37 * hash) + FILTERED_LABELS_FIELD_NUMBER;
        hash = (53 * hash) + getFilteredLabelsList().hashCode();
      }
      hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeUnixNano());
      hash = (37 * hash) + SPAN_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSpanId().hashCode();
      hash = (37 * hash) + TRACE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getTraceId().hashCode();
      switch (valueCase_) {
        case 3:
          hash = (37 * hash) + AS_DOUBLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getAsDouble()));
          break;
        case 6:
          hash = (37 * hash) + AS_INT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getAsInt());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A representation of an exemplar, which is a sample input measurement.
     * Exemplars also hold information about the environment when the measurement
     * was recorded, for example the span and trace ID of the active span when the
     * exemplar was recorded.
     * </pre>
     *
     * Protobuf type {@code jaeger.api_v2.metrics.Exemplar}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jaeger.api_v2.metrics.Exemplar)
        io.jaegertracing.api_v2.metrics.Otelmetric.ExemplarOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Exemplar_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Exemplar_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.class, io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.Builder.class);
      }

      // Construct using io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFilteredLabelsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filteredLabelsBuilder_ == null) {
          filteredLabels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filteredLabelsBuilder_.clear();
        }
        timeUnixNano_ = 0L;

        spanId_ = com.google.protobuf.ByteString.EMPTY;

        traceId_ = com.google.protobuf.ByteString.EMPTY;

        valueCase_ = 0;
        value_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.internal_static_jaeger_api_v2_metrics_Exemplar_descriptor;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getDefaultInstanceForType() {
        return io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.getDefaultInstance();
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar build() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar buildPartial() {
        io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar result = new io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar(this);
        int from_bitField0_ = bitField0_;
        if (filteredLabelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filteredLabels_ = java.util.Collections.unmodifiableList(filteredLabels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filteredLabels_ = filteredLabels_;
        } else {
          result.filteredLabels_ = filteredLabelsBuilder_.build();
        }
        result.timeUnixNano_ = timeUnixNano_;
        if (valueCase_ == 3) {
          result.value_ = value_;
        }
        if (valueCase_ == 6) {
          result.value_ = value_;
        }
        result.spanId_ = spanId_;
        result.traceId_ = traceId_;
        result.valueCase_ = valueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar) {
          return mergeFrom((io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar other) {
        if (other == io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar.getDefaultInstance()) return this;
        if (filteredLabelsBuilder_ == null) {
          if (!other.filteredLabels_.isEmpty()) {
            if (filteredLabels_.isEmpty()) {
              filteredLabels_ = other.filteredLabels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFilteredLabelsIsMutable();
              filteredLabels_.addAll(other.filteredLabels_);
            }
            onChanged();
          }
        } else {
          if (!other.filteredLabels_.isEmpty()) {
            if (filteredLabelsBuilder_.isEmpty()) {
              filteredLabelsBuilder_.dispose();
              filteredLabelsBuilder_ = null;
              filteredLabels_ = other.filteredLabels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filteredLabelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFilteredLabelsFieldBuilder() : null;
            } else {
              filteredLabelsBuilder_.addAllMessages(other.filteredLabels_);
            }
          }
        }
        if (other.getTimeUnixNano() != 0L) {
          setTimeUnixNano(other.getTimeUnixNano());
        }
        if (other.getSpanId() != com.google.protobuf.ByteString.EMPTY) {
          setSpanId(other.getSpanId());
        }
        if (other.getTraceId() != com.google.protobuf.ByteString.EMPTY) {
          setTraceId(other.getTraceId());
        }
        switch (other.getValueCase()) {
          case AS_DOUBLE: {
            setAsDouble(other.getAsDouble());
            break;
          }
          case AS_INT: {
            setAsInt(other.getAsInt());
            break;
          }
          case VALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int valueCase_ = 0;
      private java.lang.Object value_;
      public ValueCase
          getValueCase() {
        return ValueCase.forNumber(
            valueCase_);
      }

      public Builder clearValue() {
        valueCase_ = 0;
        value_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> filteredLabels_ =
        java.util.Collections.emptyList();
      private void ensureFilteredLabelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filteredLabels_ = new java.util.ArrayList<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue>(filteredLabels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> filteredLabelsBuilder_;

      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> getFilteredLabelsList() {
        if (filteredLabelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filteredLabels_);
        } else {
          return filteredLabelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public int getFilteredLabelsCount() {
        if (filteredLabelsBuilder_ == null) {
          return filteredLabels_.size();
        } else {
          return filteredLabelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue getFilteredLabels(int index) {
        if (filteredLabelsBuilder_ == null) {
          return filteredLabels_.get(index);
        } else {
          return filteredLabelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder setFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (filteredLabelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilteredLabelsIsMutable();
          filteredLabels_.set(index, value);
          onChanged();
        } else {
          filteredLabelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder setFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.set(index, builderForValue.build());
          onChanged();
        } else {
          filteredLabelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (filteredLabelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(value);
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue value) {
        if (filteredLabelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(index, value);
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(builderForValue.build());
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addFilteredLabels(
          int index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder builderForValue) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.add(index, builderForValue.build());
          onChanged();
        } else {
          filteredLabelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder addAllFilteredLabels(
          java.lang.Iterable<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue> values) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filteredLabels_);
          onChanged();
        } else {
          filteredLabelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder clearFilteredLabels() {
        if (filteredLabelsBuilder_ == null) {
          filteredLabels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filteredLabelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public Builder removeFilteredLabels(int index) {
        if (filteredLabelsBuilder_ == null) {
          ensureFilteredLabelsIsMutable();
          filteredLabels_.remove(index);
          onChanged();
        } else {
          filteredLabelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder getFilteredLabelsBuilder(
          int index) {
        return getFilteredLabelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder getFilteredLabelsOrBuilder(
          int index) {
        if (filteredLabelsBuilder_ == null) {
          return filteredLabels_.get(index);  } else {
          return filteredLabelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public java.util.List<? extends io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
           getFilteredLabelsOrBuilderList() {
        if (filteredLabelsBuilder_ != null) {
          return filteredLabelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filteredLabels_);
        }
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addFilteredLabelsBuilder() {
        return getFilteredLabelsFieldBuilder().addBuilder(
            io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder addFilteredLabelsBuilder(
          int index) {
        return getFilteredLabelsFieldBuilder().addBuilder(
            index, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.getDefaultInstance());
      }
      /**
       * <pre>
       * The set of labels that were filtered out by the aggregator, but recorded
       * alongside the original measurement. Only labels that were filtered out
       * by the aggregator should be included
       * </pre>
       *
       * <code>repeated .jaeger.api_v2.metrics.StringKeyValue filtered_labels = 1;</code>
       */
      public java.util.List<io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder> 
           getFilteredLabelsBuilderList() {
        return getFilteredLabelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder> 
          getFilteredLabelsFieldBuilder() {
        if (filteredLabelsBuilder_ == null) {
          filteredLabelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValue.Builder, io.jaegertracing.api_v2.metrics.Otelmetric.StringKeyValueOrBuilder>(
                  filteredLabels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          filteredLabels_ = null;
        }
        return filteredLabelsBuilder_;
      }

      private long timeUnixNano_ ;
      /**
       * <pre>
       * time_unix_nano is the exact time when this exemplar was recorded
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 2;</code>
       * @return The timeUnixNano.
       */
      @java.lang.Override
      public long getTimeUnixNano() {
        return timeUnixNano_;
      }
      /**
       * <pre>
       * time_unix_nano is the exact time when this exemplar was recorded
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 2;</code>
       * @param value The timeUnixNano to set.
       * @return This builder for chaining.
       */
      public Builder setTimeUnixNano(long value) {
        
        timeUnixNano_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * time_unix_nano is the exact time when this exemplar was recorded
       * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
       * 1970.
       * </pre>
       *
       * <code>fixed64 time_unix_nano = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeUnixNano() {
        
        timeUnixNano_ = 0L;
        onChanged();
        return this;
      }

      /**
       * <code>double as_double = 3;</code>
       * @return Whether the asDouble field is set.
       */
      public boolean hasAsDouble() {
        return valueCase_ == 3;
      }
      /**
       * <code>double as_double = 3;</code>
       * @return The asDouble.
       */
      public double getAsDouble() {
        if (valueCase_ == 3) {
          return (java.lang.Double) value_;
        }
        return 0D;
      }
      /**
       * <code>double as_double = 3;</code>
       * @param value The asDouble to set.
       * @return This builder for chaining.
       */
      public Builder setAsDouble(double value) {
        valueCase_ = 3;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>double as_double = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAsDouble() {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>sfixed64 as_int = 6;</code>
       * @return Whether the asInt field is set.
       */
      public boolean hasAsInt() {
        return valueCase_ == 6;
      }
      /**
       * <code>sfixed64 as_int = 6;</code>
       * @return The asInt.
       */
      public long getAsInt() {
        if (valueCase_ == 6) {
          return (java.lang.Long) value_;
        }
        return 0L;
      }
      /**
       * <code>sfixed64 as_int = 6;</code>
       * @param value The asInt to set.
       * @return This builder for chaining.
       */
      public Builder setAsInt(long value) {
        valueCase_ = 6;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>sfixed64 as_int = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearAsInt() {
        if (valueCase_ == 6) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
        return this;
      }

      private com.google.protobuf.ByteString spanId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Optional) Span ID of the exemplar trace.
       * span_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes span_id = 4;</code>
       * @return The spanId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSpanId() {
        return spanId_;
      }
      /**
       * <pre>
       * (Optional) Span ID of the exemplar trace.
       * span_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes span_id = 4;</code>
       * @param value The spanId to set.
       * @return This builder for chaining.
       */
      public Builder setSpanId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        spanId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Span ID of the exemplar trace.
       * span_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes span_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpanId() {
        
        spanId_ = getDefaultInstance().getSpanId();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString traceId_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * (Optional) Trace ID of the exemplar trace.
       * trace_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes trace_id = 5;</code>
       * @return The traceId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTraceId() {
        return traceId_;
      }
      /**
       * <pre>
       * (Optional) Trace ID of the exemplar trace.
       * trace_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes trace_id = 5;</code>
       * @param value The traceId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceId(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        traceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * (Optional) Trace ID of the exemplar trace.
       * trace_id may be missing if the measurement is not recorded inside a trace
       * or if the trace is not sampled.
       * </pre>
       *
       * <code>bytes trace_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceId() {
        
        traceId_ = getDefaultInstance().getTraceId();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jaeger.api_v2.metrics.Exemplar)
    }

    // @@protoc_insertion_point(class_scope:jaeger.api_v2.metrics.Exemplar)
    private static final io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar();
    }

    public static io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exemplar>
        PARSER = new com.google.protobuf.AbstractParser<Exemplar>() {
      @java.lang.Override
      public Exemplar parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Exemplar(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Exemplar> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exemplar> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.jaegertracing.api_v2.metrics.Otelmetric.Exemplar getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_StringKeyValue_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_StringKeyValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_Metric_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_Metric_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_IntGauge_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_IntGauge_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_Gauge_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_Gauge_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_IntSum_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_IntSum_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_Sum_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_Sum_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_IntHistogram_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_IntHistogram_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_Histogram_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_Histogram_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_Summary_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_Summary_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_IntDataPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_IntDataPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_NumberDataPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_NumberDataPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_HistogramDataPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_HistogramDataPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_SummaryDataPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_IntExemplar_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_IntExemplar_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jaeger_api_v2_metrics_Exemplar_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jaeger_api_v2_metrics_Exemplar_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&jaeger/api_v2/metrics/otelmetric.proto" +
      "\022\025jaeger.api_v2.metrics\032\024gogoproto/gogo." +
      "proto\",\n\016StringKeyValue\022\013\n\003key\030\001 \001(\t\022\r\n\005" +
      "value\030\002 \001(\t\"\267\003\n\006Metric\022\014\n\004name\030\001 \001(\t\022\023\n\013" +
      "description\030\002 \001(\t\022\014\n\004unit\030\003 \001(\t\0228\n\tint_g" +
      "auge\030\004 \001(\0132\037.jaeger.api_v2.metrics.IntGa" +
      "ugeB\002\030\001H\000\022-\n\005gauge\030\005 \001(\0132\034.jaeger.api_v2" +
      ".metrics.GaugeH\000\0224\n\007int_sum\030\006 \001(\0132\035.jaeg" +
      "er.api_v2.metrics.IntSumB\002\030\001H\000\022)\n\003sum\030\007 " +
      "\001(\0132\032.jaeger.api_v2.metrics.SumH\000\022@\n\rint" +
      "_histogram\030\010 \001(\0132#.jaeger.api_v2.metrics" +
      ".IntHistogramB\002\030\001H\000\0225\n\thistogram\030\t \001(\0132 " +
      ".jaeger.api_v2.metrics.HistogramH\000\0221\n\007su" +
      "mmary\030\013 \001(\0132\036.jaeger.api_v2.metrics.Summ" +
      "aryH\000B\006\n\004data\"H\n\010IntGauge\0228\n\013data_points" +
      "\030\001 \003(\0132#.jaeger.api_v2.metrics.IntDataPo" +
      "int:\002\030\001\"D\n\005Gauge\022;\n\013data_points\030\001 \003(\0132&." +
      "jaeger.api_v2.metrics.NumberDataPoint\"\254\001" +
      "\n\006IntSum\0228\n\013data_points\030\001 \003(\0132#.jaeger.a" +
      "pi_v2.metrics.IntDataPoint\022N\n\027aggregatio" +
      "n_temporality\030\002 \001(\0162-.jaeger.api_v2.metr" +
      "ics.AggregationTemporality\022\024\n\014is_monoton" +
      "ic\030\003 \001(\010:\002\030\001\"\250\001\n\003Sum\022;\n\013data_points\030\001 \003(" +
      "\0132&.jaeger.api_v2.metrics.NumberDataPoin" +
      "t\022N\n\027aggregation_temporality\030\002 \001(\0162-.jae" +
      "ger.api_v2.metrics.AggregationTemporalit" +
      "y\022\024\n\014is_monotonic\030\003 \001(\010\"\245\001\n\014IntHistogram" +
      "\022A\n\013data_points\030\001 \003(\0132,.jaeger.api_v2.me" +
      "trics.IntHistogramDataPoint\022N\n\027aggregati" +
      "on_temporality\030\002 \001(\0162-.jaeger.api_v2.met" +
      "rics.AggregationTemporality:\002\030\001\"\233\001\n\tHist" +
      "ogram\022>\n\013data_points\030\001 \003(\0132).jaeger.api_" +
      "v2.metrics.HistogramDataPoint\022N\n\027aggrega" +
      "tion_temporality\030\002 \001(\0162-.jaeger.api_v2.m" +
      "etrics.AggregationTemporality\"G\n\007Summary" +
      "\022<\n\013data_points\030\001 \003(\0132\'.jaeger.api_v2.me" +
      "trics.SummaryDataPoint\"\305\001\n\014IntDataPoint\022" +
      "5\n\006labels\030\001 \003(\0132%.jaeger.api_v2.metrics." +
      "StringKeyValue\022\034\n\024start_time_unix_nano\030\002" +
      " \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005value\030\004 " +
      "\001(\020\0225\n\texemplars\030\005 \003(\0132\".jaeger.api_v2.m" +
      "etrics.IntExemplar:\002\030\001\"\342\001\n\017NumberDataPoi" +
      "nt\0225\n\006labels\030\001 \003(\0132%.jaeger.api_v2.metri" +
      "cs.StringKeyValue\022\034\n\024start_time_unix_nan" +
      "o\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\023\n\tas_do" +
      "uble\030\004 \001(\001H\000\022\020\n\006as_int\030\006 \001(\020H\000\0222\n\texempl" +
      "ars\030\005 \003(\0132\037.jaeger.api_v2.metrics.Exempl" +
      "arB\007\n\005value\"\213\002\n\025IntHistogramDataPoint\0225\n" +
      "\006labels\030\001 \003(\0132%.jaeger.api_v2.metrics.St" +
      "ringKeyValue\022\034\n\024start_time_unix_nano\030\002 \001" +
      "(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count\030\004 \001(" +
      "\006\022\013\n\003sum\030\005 \001(\020\022\025\n\rbucket_counts\030\006 \003(\006\022\027\n" +
      "\017explicit_bounds\030\007 \003(\001\0225\n\texemplars\030\010 \003(" +
      "\0132\".jaeger.api_v2.metrics.IntExemplar:\002\030" +
      "\001\"\201\002\n\022HistogramDataPoint\0225\n\006labels\030\001 \003(\013" +
      "2%.jaeger.api_v2.metrics.StringKeyValue\022" +
      "\034\n\024start_time_unix_nano\030\002 \001(\006\022\026\n\016time_un" +
      "ix_nano\030\003 \001(\006\022\r\n\005count\030\004 \001(\006\022\013\n\003sum\030\005 \001(" +
      "\001\022\025\n\rbucket_counts\030\006 \003(\006\022\027\n\017explicit_bou" +
      "nds\030\007 \003(\001\0222\n\texemplars\030\010 \003(\0132\037.jaeger.ap" +
      "i_v2.metrics.Exemplar\"\241\002\n\020SummaryDataPoi" +
      "nt\0225\n\006labels\030\001 \003(\0132%.jaeger.api_v2.metri" +
      "cs.StringKeyValue\022\034\n\024start_time_unix_nan" +
      "o\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count" +
      "\030\004 \001(\006\022\013\n\003sum\030\005 \001(\001\022P\n\017quantile_values\030\006" +
      " \003(\01327.jaeger.api_v2.metrics.SummaryData" +
      "Point.ValueAtQuantile\0322\n\017ValueAtQuantile" +
      "\022\020\n\010quantile\030\001 \001(\001\022\r\n\005value\030\002 \001(\001\"\233\001\n\013In" +
      "tExemplar\022>\n\017filtered_labels\030\001 \003(\0132%.jae" +
      "ger.api_v2.metrics.StringKeyValue\022\026\n\016tim" +
      "e_unix_nano\030\002 \001(\006\022\r\n\005value\030\003 \001(\020\022\017\n\007span" +
      "_id\030\004 \001(\014\022\020\n\010trace_id\030\005 \001(\014:\002\030\001\"\265\001\n\010Exem" +
      "plar\022>\n\017filtered_labels\030\001 \003(\0132%.jaeger.a" +
      "pi_v2.metrics.StringKeyValue\022\026\n\016time_uni" +
      "x_nano\030\002 \001(\006\022\023\n\tas_double\030\003 \001(\001H\000\022\020\n\006as_" +
      "int\030\006 \001(\020H\000\022\017\n\007span_id\030\004 \001(\014\022\020\n\010trace_id" +
      "\030\005 \001(\014B\007\n\005value*\214\001\n\026AggregationTemporali" +
      "ty\022\'\n#AGGREGATION_TEMPORALITY_UNSPECIFIE" +
      "D\020\000\022!\n\035AGGREGATION_TEMPORALITY_DELTA\020\001\022&" +
      "\n\"AGGREGATION_TEMPORALITY_CUMULATIVE\020\002B6" +
      "\n\037io.jaegertracing.api_v2.metricsZ\007metri" +
      "cs\310\342\036\001\320\342\036\001\340\342\036\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
        });
    internal_static_jaeger_api_v2_metrics_StringKeyValue_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_jaeger_api_v2_metrics_StringKeyValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_StringKeyValue_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_jaeger_api_v2_metrics_Metric_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_jaeger_api_v2_metrics_Metric_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_Metric_descriptor,
        new java.lang.String[] { "Name", "Description", "Unit", "IntGauge", "Gauge", "IntSum", "Sum", "IntHistogram", "Histogram", "Summary", "Data", });
    internal_static_jaeger_api_v2_metrics_IntGauge_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_jaeger_api_v2_metrics_IntGauge_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_IntGauge_descriptor,
        new java.lang.String[] { "DataPoints", });
    internal_static_jaeger_api_v2_metrics_Gauge_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_jaeger_api_v2_metrics_Gauge_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_Gauge_descriptor,
        new java.lang.String[] { "DataPoints", });
    internal_static_jaeger_api_v2_metrics_IntSum_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_jaeger_api_v2_metrics_IntSum_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_IntSum_descriptor,
        new java.lang.String[] { "DataPoints", "AggregationTemporality", "IsMonotonic", });
    internal_static_jaeger_api_v2_metrics_Sum_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_jaeger_api_v2_metrics_Sum_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_Sum_descriptor,
        new java.lang.String[] { "DataPoints", "AggregationTemporality", "IsMonotonic", });
    internal_static_jaeger_api_v2_metrics_IntHistogram_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_jaeger_api_v2_metrics_IntHistogram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_IntHistogram_descriptor,
        new java.lang.String[] { "DataPoints", "AggregationTemporality", });
    internal_static_jaeger_api_v2_metrics_Histogram_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_jaeger_api_v2_metrics_Histogram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_Histogram_descriptor,
        new java.lang.String[] { "DataPoints", "AggregationTemporality", });
    internal_static_jaeger_api_v2_metrics_Summary_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_jaeger_api_v2_metrics_Summary_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_Summary_descriptor,
        new java.lang.String[] { "DataPoints", });
    internal_static_jaeger_api_v2_metrics_IntDataPoint_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_jaeger_api_v2_metrics_IntDataPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_IntDataPoint_descriptor,
        new java.lang.String[] { "Labels", "StartTimeUnixNano", "TimeUnixNano", "Value", "Exemplars", });
    internal_static_jaeger_api_v2_metrics_NumberDataPoint_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_jaeger_api_v2_metrics_NumberDataPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_NumberDataPoint_descriptor,
        new java.lang.String[] { "Labels", "StartTimeUnixNano", "TimeUnixNano", "AsDouble", "AsInt", "Exemplars", "Value", });
    internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_IntHistogramDataPoint_descriptor,
        new java.lang.String[] { "Labels", "StartTimeUnixNano", "TimeUnixNano", "Count", "Sum", "BucketCounts", "ExplicitBounds", "Exemplars", });
    internal_static_jaeger_api_v2_metrics_HistogramDataPoint_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_jaeger_api_v2_metrics_HistogramDataPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_HistogramDataPoint_descriptor,
        new java.lang.String[] { "Labels", "StartTimeUnixNano", "TimeUnixNano", "Count", "Sum", "BucketCounts", "ExplicitBounds", "Exemplars", });
    internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_jaeger_api_v2_metrics_SummaryDataPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor,
        new java.lang.String[] { "Labels", "StartTimeUnixNano", "TimeUnixNano", "Count", "Sum", "QuantileValues", });
    internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_descriptor =
      internal_static_jaeger_api_v2_metrics_SummaryDataPoint_descriptor.getNestedTypes().get(0);
    internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_SummaryDataPoint_ValueAtQuantile_descriptor,
        new java.lang.String[] { "Quantile", "Value", });
    internal_static_jaeger_api_v2_metrics_IntExemplar_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_jaeger_api_v2_metrics_IntExemplar_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_IntExemplar_descriptor,
        new java.lang.String[] { "FilteredLabels", "TimeUnixNano", "Value", "SpanId", "TraceId", });
    internal_static_jaeger_api_v2_metrics_Exemplar_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_jaeger_api_v2_metrics_Exemplar_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jaeger_api_v2_metrics_Exemplar_descriptor,
        new java.lang.String[] { "FilteredLabels", "TimeUnixNano", "AsDouble", "AsInt", "SpanId", "TraceId", "Value", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf.GoGoProtos.marshalerAll);
    registry.add(com.google.protobuf.GoGoProtos.sizerAll);
    registry.add(com.google.protobuf.GoGoProtos.unmarshalerAll);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.GoGoProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
