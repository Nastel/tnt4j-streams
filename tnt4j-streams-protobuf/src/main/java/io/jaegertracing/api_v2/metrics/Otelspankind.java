// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jaeger/api_v2/metrics/otelspankind.proto

package io.jaegertracing.api_v2.metrics;

public final class Otelspankind {
  private Otelspankind() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * SpanKind is the type of span. Can be used to specify additional relationships between spans
   * in addition to a parent/child relationship.
   * </pre>
   *
   * Protobuf enum {@code jaeger.api_v2.metrics.SpanKind}
   */
  public enum SpanKind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified. Do NOT use as default.
     * Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    SPAN_KIND_UNSPECIFIED(0),
    /**
     * <pre>
     * Indicates that the span represents an internal operation within an application,
     * as opposed to an operation happening at the boundaries. Default value.
     * </pre>
     *
     * <code>SPAN_KIND_INTERNAL = 1;</code>
     */
    SPAN_KIND_INTERNAL(1),
    /**
     * <pre>
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     * </pre>
     *
     * <code>SPAN_KIND_SERVER = 2;</code>
     */
    SPAN_KIND_SERVER(2),
    /**
     * <pre>
     * Indicates that the span describes a request to some remote service.
     * </pre>
     *
     * <code>SPAN_KIND_CLIENT = 3;</code>
     */
    SPAN_KIND_CLIENT(3),
    /**
     * <pre>
     * Indicates that the span describes a producer sending a message to a broker.
     * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
     * between producer and consumer spans. A PRODUCER span ends when the message was accepted
     * by the broker while the logical processing of the message might span a much longer time.
     * </pre>
     *
     * <code>SPAN_KIND_PRODUCER = 4;</code>
     */
    SPAN_KIND_PRODUCER(4),
    /**
     * <pre>
     * Indicates that the span describes consumer receiving a message from a broker.
     * Like the PRODUCER kind, there is often no direct critical path latency relationship
     * between producer and consumer spans.
     * </pre>
     *
     * <code>SPAN_KIND_CONSUMER = 5;</code>
     */
    SPAN_KIND_CONSUMER(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified. Do NOT use as default.
     * Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    public static final int SPAN_KIND_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Indicates that the span represents an internal operation within an application,
     * as opposed to an operation happening at the boundaries. Default value.
     * </pre>
     *
     * <code>SPAN_KIND_INTERNAL = 1;</code>
     */
    public static final int SPAN_KIND_INTERNAL_VALUE = 1;
    /**
     * <pre>
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     * </pre>
     *
     * <code>SPAN_KIND_SERVER = 2;</code>
     */
    public static final int SPAN_KIND_SERVER_VALUE = 2;
    /**
     * <pre>
     * Indicates that the span describes a request to some remote service.
     * </pre>
     *
     * <code>SPAN_KIND_CLIENT = 3;</code>
     */
    public static final int SPAN_KIND_CLIENT_VALUE = 3;
    /**
     * <pre>
     * Indicates that the span describes a producer sending a message to a broker.
     * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
     * between producer and consumer spans. A PRODUCER span ends when the message was accepted
     * by the broker while the logical processing of the message might span a much longer time.
     * </pre>
     *
     * <code>SPAN_KIND_PRODUCER = 4;</code>
     */
    public static final int SPAN_KIND_PRODUCER_VALUE = 4;
    /**
     * <pre>
     * Indicates that the span describes consumer receiving a message from a broker.
     * Like the PRODUCER kind, there is often no direct critical path latency relationship
     * between producer and consumer spans.
     * </pre>
     *
     * <code>SPAN_KIND_CONSUMER = 5;</code>
     */
    public static final int SPAN_KIND_CONSUMER_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpanKind valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SpanKind forNumber(int value) {
      switch (value) {
        case 0: return SPAN_KIND_UNSPECIFIED;
        case 1: return SPAN_KIND_INTERNAL;
        case 2: return SPAN_KIND_SERVER;
        case 3: return SPAN_KIND_CLIENT;
        case 4: return SPAN_KIND_PRODUCER;
        case 5: return SPAN_KIND_CONSUMER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpanKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SpanKind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpanKind>() {
            public SpanKind findValueByNumber(int number) {
              return SpanKind.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.jaegertracing.api_v2.metrics.Otelspankind.getDescriptor().getEnumTypes().get(0);
    }

    private static final SpanKind[] VALUES = values();

    public static SpanKind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SpanKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jaeger.api_v2.metrics.SpanKind)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(jaeger/api_v2/metrics/otelspankind.pro" +
      "to\022\025jaeger.api_v2.metrics\032\024gogoproto/gog" +
      "o.proto*\231\001\n\010SpanKind\022\031\n\025SPAN_KIND_UNSPEC" +
      "IFIED\020\000\022\026\n\022SPAN_KIND_INTERNAL\020\001\022\024\n\020SPAN_" +
      "KIND_SERVER\020\002\022\024\n\020SPAN_KIND_CLIENT\020\003\022\026\n\022S" +
      "PAN_KIND_PRODUCER\020\004\022\026\n\022SPAN_KIND_CONSUME" +
      "R\020\005B6\n\037io.jaegertracing.api_v2.metricsZ\007" +
      "metrics\310\342\036\001\320\342\036\001\340\342\036\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
        });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf.GoGoProtos.marshalerAll);
    registry.add(com.google.protobuf.GoGoProtos.sizerAll);
    registry.add(com.google.protobuf.GoGoProtos.unmarshalerAll);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.GoGoProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
